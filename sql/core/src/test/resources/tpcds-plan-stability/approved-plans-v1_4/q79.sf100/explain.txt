== Physical Plan ==
TakeOrderedAndProject (33)
+- * Project (32)
   +- * SortMergeJoin Inner (31)
      :- * Sort (25)
      :  +- Exchange (24)
      :     +- * HashAggregate (23)
      :        +- Exchange (22)
      :           +- * HashAggregate (21)
      :              +- * Project (20)
      :                 +- * BroadcastHashJoin Inner BuildRight (19)
      :                    :- * Project (13)
      :                    :  +- * BroadcastHashJoin Inner BuildRight (12)
      :                    :     :- * Project (6)
      :                    :     :  +- * BroadcastHashJoin Inner BuildRight (5)
      :                    :     :     :- * Filter (3)
      :                    :     :     :  +- * ColumnarToRow (2)
      :                    :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
      :                    :     :     +- ReusedExchange (4)
      :                    :     +- BroadcastExchange (11)
      :                    :        +- * Project (10)
      :                    :           +- * Filter (9)
      :                    :              +- * ColumnarToRow (8)
      :                    :                 +- Scan parquet spark_catalog.default.household_demographics (7)
      :                    +- BroadcastExchange (18)
      :                       +- * Project (17)
      :                          +- * Filter (16)
      :                             +- * ColumnarToRow (15)
      :                                +- Scan parquet spark_catalog.default.store (14)
      +- * Sort (30)
         +- Exchange (29)
            +- * Filter (28)
               +- * ColumnarToRow (27)
                  +- Scan parquet spark_catalog.default.customer (26)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_hdemo_sk), IsNotNull(ss_customer_sk)]
ReadSchema: struct<ss_customer_sk:int,ss_hdemo_sk:int,ss_addr_sk:int,ss_store_sk:int,ss_ticket_number:int,ss_coupon_amt:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 4]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8]
Condition : ((((isnotnull(ss_store_sk#4) AND isnotnull(ss_hdemo_sk#2)) AND isnotnull(ss_customer_sk#1)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#10, [id=#11]), xxhash64(ss_hdemo_sk#2, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#12, [id=#13]), xxhash64(ss_store_sk#4, 42)))

(4) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#14]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#14]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [7]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Input [9]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, ss_sold_date_sk#8, d_date_sk#14]

(7) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,6),GreaterThan(hd_vehicle_count,2)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(8) ColumnarToRow [codegen id : 2]
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]

(9) Filter [codegen id : 2]
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Condition : (((hd_dep_count#16 = 6) OR (hd_vehicle_count#17 > 2)) AND isnotnull(hd_demo_sk#15))

(10) Project [codegen id : 2]
Output [1]: [hd_demo_sk#15]
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]

(11) BroadcastExchange
Input [1]: [hd_demo_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_hdemo_sk#2]
Right keys [1]: [hd_demo_sk#15]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7]
Input [8]: [ss_customer_sk#1, ss_hdemo_sk#2, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, hd_demo_sk#15]

(14) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#18, s_number_employees#19, s_city#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>

(15) ColumnarToRow [codegen id : 3]
Input [3]: [s_store_sk#18, s_number_employees#19, s_city#20]

(16) Filter [codegen id : 3]
Input [3]: [s_store_sk#18, s_number_employees#19, s_city#20]
Condition : (((isnotnull(s_number_employees#19) AND (s_number_employees#19 >= 200)) AND (s_number_employees#19 <= 295)) AND isnotnull(s_store_sk#18))

(17) Project [codegen id : 3]
Output [2]: [s_store_sk#18, s_city#20]
Input [3]: [s_store_sk#18, s_number_employees#19, s_city#20]

(18) BroadcastExchange
Input [2]: [s_store_sk#18, s_city#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=2]

(19) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#4]
Right keys [1]: [s_store_sk#18]
Join type: Inner
Join condition: None

(20) Project [codegen id : 4]
Output [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#20]
Input [8]: [ss_customer_sk#1, ss_addr_sk#3, ss_store_sk#4, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_store_sk#18, s_city#20]

(21) HashAggregate [codegen id : 4]
Input [6]: [ss_customer_sk#1, ss_addr_sk#3, ss_ticket_number#5, ss_coupon_amt#6, ss_net_profit#7, s_city#20]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#20]
Functions [2]: [partial_sum(UnscaledValue(ss_coupon_amt#6)), partial_sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum#21, sum#22]
Results [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#20, sum#23, sum#24]

(22) Exchange
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#20, sum#23, sum#24]
Arguments: hashpartitioning(ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#20, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(23) HashAggregate [codegen id : 5]
Input [6]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#20, sum#23, sum#24]
Keys [4]: [ss_ticket_number#5, ss_customer_sk#1, ss_addr_sk#3, s_city#20]
Functions [2]: [sum(UnscaledValue(ss_coupon_amt#6)), sum(UnscaledValue(ss_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_coupon_amt#6))#25, sum(UnscaledValue(ss_net_profit#7))#26]
Results [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#20, MakeDecimal(sum(UnscaledValue(ss_coupon_amt#6))#25,17,2) AS amt#27, MakeDecimal(sum(UnscaledValue(ss_net_profit#7))#26,17,2) AS profit#28]

(24) Exchange
Input [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#20, amt#27, profit#28]
Arguments: hashpartitioning(ss_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 6]
Input [5]: [ss_ticket_number#5, ss_customer_sk#1, s_city#20, amt#27, profit#28]
Arguments: [ss_customer_sk#1 ASC NULLS FIRST], false, 0

(26) Scan parquet spark_catalog.default.customer
Output [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk)]
ReadSchema: struct<c_customer_sk:int,c_first_name:string,c_last_name:string>

(27) ColumnarToRow [codegen id : 7]
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]

(28) Filter [codegen id : 7]
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Condition : isnotnull(c_customer_sk#29)

(29) Exchange
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Arguments: hashpartitioning(c_customer_sk#29, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(30) Sort [codegen id : 8]
Input [3]: [c_customer_sk#29, c_first_name#30, c_last_name#31]
Arguments: [c_customer_sk#29 ASC NULLS FIRST], false, 0

(31) SortMergeJoin [codegen id : 9]
Left keys [1]: [ss_customer_sk#1]
Right keys [1]: [c_customer_sk#29]
Join type: Inner
Join condition: None

(32) Project [codegen id : 9]
Output [7]: [c_last_name#31, c_first_name#30, substr(s_city#20, 1, 30) AS substr(s_city, 1, 30)#32, ss_ticket_number#5, amt#27, profit#28, s_city#20]
Input [8]: [ss_ticket_number#5, ss_customer_sk#1, s_city#20, amt#27, profit#28, c_customer_sk#29, c_first_name#30, c_last_name#31]

(33) TakeOrderedAndProject
Input [7]: [c_last_name#31, c_first_name#30, substr(s_city, 1, 30)#32, ss_ticket_number#5, amt#27, profit#28, s_city#20]
Arguments: 100, [c_last_name#31 ASC NULLS FIRST, c_first_name#30 ASC NULLS FIRST, substr(s_city#20, 1, 30) ASC NULLS FIRST, profit#28 ASC NULLS FIRST], [c_last_name#31, c_first_name#30, substr(s_city, 1, 30)#32, ss_ticket_number#5, amt#27, profit#28]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (40)
+- Exchange (39)
   +- ObjectHashAggregate (38)
      +- * Project (37)
         +- * Filter (36)
            +- * ColumnarToRow (35)
               +- Scan parquet spark_catalog.default.household_demographics (34)


(34) Scan parquet spark_catalog.default.household_demographics
Output [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/household_demographics]
PushedFilters: [Or(EqualTo(hd_dep_count,6),GreaterThan(hd_vehicle_count,2)), IsNotNull(hd_demo_sk)]
ReadSchema: struct<hd_demo_sk:int,hd_dep_count:int,hd_vehicle_count:int>

(35) ColumnarToRow [codegen id : 1]
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]

(36) Filter [codegen id : 1]
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]
Condition : (((hd_dep_count#16 = 6) OR (hd_vehicle_count#17 > 2)) AND isnotnull(hd_demo_sk#15))

(37) Project [codegen id : 1]
Output [1]: [hd_demo_sk#15]
Input [3]: [hd_demo_sk#15, hd_dep_count#16, hd_vehicle_count#17]

(38) ObjectHashAggregate
Input [1]: [hd_demo_sk#15]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(hd_demo_sk#15, 42), 3312, 26496, 0, 0)]
Aggregate Attributes [1]: [buf#33]
Results [1]: [buf#34]

(39) Exchange
Input [1]: [buf#34]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(40) ObjectHashAggregate
Input [1]: [buf#34]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#15, 42), 3312, 26496, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#15, 42), 3312, 26496, 0, 0)#35]
Results [1]: [bloom_filter_agg(xxhash64(hd_demo_sk#15, 42), 3312, 26496, 0, 0)#35 AS bloomFilter#36]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
ObjectHashAggregate (47)
+- Exchange (46)
   +- ObjectHashAggregate (45)
      +- * Project (44)
         +- * Filter (43)
            +- * ColumnarToRow (42)
               +- Scan parquet spark_catalog.default.store (41)


(41) Scan parquet spark_catalog.default.store
Output [3]: [s_store_sk#18, s_number_employees#19, s_city#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_number_employees), GreaterThanOrEqual(s_number_employees,200), LessThanOrEqual(s_number_employees,295), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_number_employees:int,s_city:string>

(42) ColumnarToRow [codegen id : 1]
Input [3]: [s_store_sk#18, s_number_employees#19, s_city#20]

(43) Filter [codegen id : 1]
Input [3]: [s_store_sk#18, s_number_employees#19, s_city#20]
Condition : (((isnotnull(s_number_employees#19) AND (s_number_employees#19 >= 200)) AND (s_number_employees#19 <= 295)) AND isnotnull(s_store_sk#18))

(44) Project [codegen id : 1]
Output [2]: [s_store_sk#18, s_city#20]
Input [3]: [s_store_sk#18, s_number_employees#19, s_city#20]

(45) ObjectHashAggregate
Input [2]: [s_store_sk#18, s_city#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#18, 42), 378, 3024, 0, 0)]
Aggregate Attributes [1]: [buf#37]
Results [1]: [buf#38]

(46) Exchange
Input [1]: [buf#38]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=7]

(47) ObjectHashAggregate
Input [1]: [buf#38]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#18, 42), 378, 3024, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#18, 42), 378, 3024, 0, 0)#39]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#18, 42), 378, 3024, 0, 0)#39 AS bloomFilter#40]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (52)
+- * Project (51)
   +- * Filter (50)
      +- * ColumnarToRow (49)
         +- Scan parquet spark_catalog.default.date_dim (48)


(48) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#14, d_year#41, d_dow#42]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_dow), EqualTo(d_dow,1), In(d_year, [1999,2000,2001]), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_dow:int>

(49) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#14, d_year#41, d_dow#42]

(50) Filter [codegen id : 1]
Input [3]: [d_date_sk#14, d_year#41, d_dow#42]
Condition : (((isnotnull(d_dow#42) AND (d_dow#42 = 1)) AND d_year#41 IN (1999,2000,2001)) AND isnotnull(d_date_sk#14))

(51) Project [codegen id : 1]
Output [1]: [d_date_sk#14]
Input [3]: [d_date_sk#14, d_year#41, d_dow#42]

(52) BroadcastExchange
Input [1]: [d_date_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]


