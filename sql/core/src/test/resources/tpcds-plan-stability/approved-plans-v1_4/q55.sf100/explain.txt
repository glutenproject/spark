== Physical Plan ==
TakeOrderedAndProject (17)
+- * HashAggregate (16)
   +- Exchange (15)
      +- * HashAggregate (14)
         +- * Project (13)
            +- * BroadcastHashJoin Inner BuildRight (12)
               :- * Project (10)
               :  +- * BroadcastHashJoin Inner BuildRight (9)
               :     :- * Filter (3)
               :     :  +- * ColumnarToRow (2)
               :     :     +- Scan parquet spark_catalog.default.store_sales (1)
               :     +- BroadcastExchange (8)
               :        +- * Project (7)
               :           +- * Filter (6)
               :              +- * ColumnarToRow (5)
               :                 +- Scan parquet spark_catalog.default.item (4)
               +- ReusedExchange (11)


(1) Scan parquet spark_catalog.default.store_sales
Output [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#3), dynamicpruningexpression(ss_sold_date_sk#3 IN dynamicpruning#4)]
PushedFilters: [IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 3]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]

(3) Filter [codegen id : 3]
Input [3]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3]
Condition : (isnotnull(ss_item_sk#1) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#5, [id=#6]), xxhash64(ss_item_sk#1, 42)))

(4) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,28), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]

(6) Filter [codegen id : 1]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]
Condition : ((isnotnull(i_manager_id#10) AND (i_manager_id#10 = 28)) AND isnotnull(i_item_sk#7))

(7) Project [codegen id : 1]
Output [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]

(8) BroadcastExchange
Input [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#7]
Join type: Inner
Join condition: None

(10) Project [codegen id : 3]
Output [4]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_brand_id#8, i_brand#9]
Input [6]: [ss_item_sk#1, ss_ext_sales_price#2, ss_sold_date_sk#3, i_item_sk#7, i_brand_id#8, i_brand#9]

(11) ReusedExchange [Reuses operator id: 29]
Output [1]: [d_date_sk#11]

(12) BroadcastHashJoin [codegen id : 3]
Left keys [1]: [ss_sold_date_sk#3]
Right keys [1]: [d_date_sk#11]
Join type: Inner
Join condition: None

(13) Project [codegen id : 3]
Output [3]: [ss_ext_sales_price#2, i_brand_id#8, i_brand#9]
Input [5]: [ss_ext_sales_price#2, ss_sold_date_sk#3, i_brand_id#8, i_brand#9, d_date_sk#11]

(14) HashAggregate [codegen id : 3]
Input [3]: [ss_ext_sales_price#2, i_brand_id#8, i_brand#9]
Keys [2]: [i_brand#9, i_brand_id#8]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum#12]
Results [3]: [i_brand#9, i_brand_id#8, sum#13]

(15) Exchange
Input [3]: [i_brand#9, i_brand_id#8, sum#13]
Arguments: hashpartitioning(i_brand#9, i_brand_id#8, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(16) HashAggregate [codegen id : 4]
Input [3]: [i_brand#9, i_brand_id#8, sum#13]
Keys [2]: [i_brand#9, i_brand_id#8]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#2))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#2))#14]
Results [3]: [i_brand_id#8 AS brand_id#15, i_brand#9 AS brand#16, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#2))#14,17,2) AS ext_price#17]

(17) TakeOrderedAndProject
Input [3]: [brand_id#15, brand#16, ext_price#17]
Arguments: 100, [ext_price#17 DESC NULLS LAST, brand_id#15 ASC NULLS FIRST], [brand_id#15, brand#16, ext_price#17]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#5, [id=#6]
ObjectHashAggregate (24)
+- Exchange (23)
   +- ObjectHashAggregate (22)
      +- * Project (21)
         +- * Filter (20)
            +- * ColumnarToRow (19)
               +- Scan parquet spark_catalog.default.item (18)


(18) Scan parquet spark_catalog.default.item
Output [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,28), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manager_id:int>

(19) ColumnarToRow [codegen id : 1]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]

(20) Filter [codegen id : 1]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]
Condition : ((isnotnull(i_manager_id#10) AND (i_manager_id#10 = 28)) AND isnotnull(i_item_sk#7))

(21) Project [codegen id : 1]
Output [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Input [4]: [i_item_sk#7, i_brand_id#8, i_brand#9, i_manager_id#10]

(22) ObjectHashAggregate
Input [3]: [i_item_sk#7, i_brand_id#8, i_brand#9]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#7, 42), 2056, 16448, 0, 0)]
Aggregate Attributes [1]: [buf#18]
Results [1]: [buf#19]

(23) Exchange
Input [1]: [buf#19]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=3]

(24) ObjectHashAggregate
Input [1]: [buf#19]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#7, 42), 2056, 16448, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#7, 42), 2056, 16448, 0, 0)#20]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#7, 42), 2056, 16448, 0, 0)#20 AS bloomFilter#21]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#3 IN dynamicpruning#4
BroadcastExchange (29)
+- * Project (28)
   +- * Filter (27)
      +- * ColumnarToRow (26)
         +- Scan parquet spark_catalog.default.date_dim (25)


(25) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#11, d_year#22, d_moy#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1999), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(26) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#22, d_moy#23]

(27) Filter [codegen id : 1]
Input [3]: [d_date_sk#11, d_year#22, d_moy#23]
Condition : ((((isnotnull(d_moy#23) AND isnotnull(d_year#22)) AND (d_moy#23 = 11)) AND (d_year#22 = 1999)) AND isnotnull(d_date_sk#11))

(28) Project [codegen id : 1]
Output [1]: [d_date_sk#11]
Input [3]: [d_date_sk#11, d_year#22, d_moy#23]

(29) BroadcastExchange
Input [1]: [d_date_sk#11]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=4]


