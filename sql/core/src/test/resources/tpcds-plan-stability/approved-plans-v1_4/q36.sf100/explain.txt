== Physical Plan ==
TakeOrderedAndProject (28)
+- * Project (27)
   +- Window (26)
      +- * Sort (25)
         +- Exchange (24)
            +- * HashAggregate (23)
               +- Exchange (22)
                  +- * HashAggregate (21)
                     +- * Expand (20)
                        +- * Project (19)
                           +- * BroadcastHashJoin Inner BuildRight (18)
                              :- * Project (13)
                              :  +- * BroadcastHashJoin Inner BuildRight (12)
                              :     :- * Project (6)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                              :     :     :- * Filter (3)
                              :     :     :  +- * ColumnarToRow (2)
                              :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                              :     :     +- ReusedExchange (4)
                              :     +- BroadcastExchange (11)
                              :        +- * Project (10)
                              :           +- * Filter (9)
                              :              +- * ColumnarToRow (8)
                              :                 +- Scan parquet spark_catalog.default.store (7)
                              +- BroadcastExchange (17)
                                 +- * Filter (16)
                                    +- * ColumnarToRow (15)
                                       +- Scan parquet spark_catalog.default.item (14)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : ((isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#7, [id=#8]), xxhash64(ss_store_sk#2, 42)))

(4) ReusedExchange [Reuses operator id: 40]
Output [1]: [d_date_sk#9]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#9]

(7) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]
Condition : ((isnotnull(s_state#11) AND (s_state#11 = TN)) AND isnotnull(s_store_sk#10))

(10) Project [codegen id : 2]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_state#11]

(11) BroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#10]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, s_store_sk#10]

(14) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#12, i_class#13, i_category#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(15) ColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#12, i_class#13, i_category#14]

(16) Filter [codegen id : 3]
Input [3]: [i_item_sk#12, i_class#13, i_category#14]
Condition : isnotnull(i_item_sk#12)

(17) BroadcastExchange
Input [3]: [i_item_sk#12, i_class#13, i_category#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#14, i_class#13]
Input [6]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#12, i_class#13, i_category#14]

(20) Expand [codegen id : 4]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#14, i_class#13]
Arguments: [[ss_ext_sales_price#3, ss_net_profit#4, i_category#14, i_class#13, 0], [ss_ext_sales_price#3, ss_net_profit#4, i_category#14, null, 1], [ss_ext_sales_price#3, ss_net_profit#4, null, null, 3]], [ss_ext_sales_price#3, ss_net_profit#4, i_category#15, i_class#16, spark_grouping_id#17]

(21) HashAggregate [codegen id : 4]
Input [5]: [ss_ext_sales_price#3, ss_net_profit#4, i_category#15, i_class#16, spark_grouping_id#17]
Keys [3]: [i_category#15, i_class#16, spark_grouping_id#17]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#18, sum#19]
Results [5]: [i_category#15, i_class#16, spark_grouping_id#17, sum#20, sum#21]

(22) Exchange
Input [5]: [i_category#15, i_class#16, spark_grouping_id#17, sum#20, sum#21]
Arguments: hashpartitioning(i_category#15, i_class#16, spark_grouping_id#17, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(23) HashAggregate [codegen id : 5]
Input [5]: [i_category#15, i_class#16, spark_grouping_id#17, sum#20, sum#21]
Keys [3]: [i_category#15, i_class#16, spark_grouping_id#17]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#22, sum(UnscaledValue(ss_ext_sales_price#3))#23]
Results [7]: [(MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#22,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#23,17,2)) AS gross_margin#24, i_category#15, i_class#16, (cast((shiftright(spark_grouping_id#17, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#17, 0) & 1) as tinyint)) AS lochierarchy#25, (cast((shiftright(spark_grouping_id#17, 1) & 1) as tinyint) + cast((shiftright(spark_grouping_id#17, 0) & 1) as tinyint)) AS _w1#26, CASE WHEN (cast((shiftright(spark_grouping_id#17, 0) & 1) as tinyint) = 0) THEN i_category#15 END AS _w2#27, (MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#22,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#23,17,2)) AS _w3#28]

(24) Exchange
Input [7]: [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, _w1#26, _w2#27, _w3#28]
Arguments: hashpartitioning(_w1#26, _w2#27, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(25) Sort [codegen id : 6]
Input [7]: [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, _w1#26, _w2#27, _w3#28]
Arguments: [_w1#26 ASC NULLS FIRST, _w2#27 ASC NULLS FIRST, _w3#28 ASC NULLS FIRST], false, 0

(26) Window
Input [7]: [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, _w1#26, _w2#27, _w3#28]
Arguments: [rank(_w3#28) windowspecdefinition(_w1#26, _w2#27, _w3#28 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#29], [_w1#26, _w2#27], [_w3#28 ASC NULLS FIRST]

(27) Project [codegen id : 7]
Output [5]: [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, rank_within_parent#29]
Input [8]: [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, _w1#26, _w2#27, _w3#28, rank_within_parent#29]

(28) TakeOrderedAndProject
Input [5]: [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, rank_within_parent#29]
Arguments: 100, [lochierarchy#25 DESC NULLS LAST, CASE WHEN (lochierarchy#25 = 0) THEN i_category#15 END ASC NULLS FIRST, rank_within_parent#29 ASC NULLS FIRST], [gross_margin#24, i_category#15, i_class#16, lochierarchy#25, rank_within_parent#29]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (35)
+- Exchange (34)
   +- ObjectHashAggregate (33)
      +- * Project (32)
         +- * Filter (31)
            +- * ColumnarToRow (30)
               +- Scan parquet spark_catalog.default.store (29)


(29) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(30) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#10, s_state#11]

(31) Filter [codegen id : 1]
Input [2]: [s_store_sk#10, s_state#11]
Condition : ((isnotnull(s_state#11) AND (s_state#11 = TN)) AND isnotnull(s_store_sk#10))

(32) Project [codegen id : 1]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_state#11]

(33) ObjectHashAggregate
Input [1]: [s_store_sk#10]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [buf#30]
Results [1]: [buf#31]

(34) Exchange
Input [1]: [buf#31]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(35) ObjectHashAggregate
Input [1]: [buf#31]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)#32]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)#32 AS bloomFilter#33]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (40)
+- * Project (39)
   +- * Filter (38)
      +- * ColumnarToRow (37)
         +- Scan parquet spark_catalog.default.date_dim (36)


(36) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#34]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(37) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#34]

(38) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#34]
Condition : ((isnotnull(d_year#34) AND (d_year#34 = 2001)) AND isnotnull(d_date_sk#9))

(39) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#34]

(40) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]


