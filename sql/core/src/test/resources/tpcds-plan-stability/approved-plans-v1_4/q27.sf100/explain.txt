== Physical Plan ==
TakeOrderedAndProject (30)
+- * HashAggregate (29)
   +- Exchange (28)
      +- * HashAggregate (27)
         +- * Expand (26)
            +- * Project (25)
               +- * BroadcastHashJoin Inner BuildRight (24)
                  :- * Project (19)
                  :  +- * BroadcastHashJoin Inner BuildRight (18)
                  :     :- * Project (13)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (12)
                  :     :     :- * Project (10)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
                  :     :     :     :- * Filter (3)
                  :     :     :     :  +- * ColumnarToRow (2)
                  :     :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                  :     :     :     +- BroadcastExchange (8)
                  :     :     :        +- * Project (7)
                  :     :     :           +- * Filter (6)
                  :     :     :              +- * ColumnarToRow (5)
                  :     :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
                  :     :     +- ReusedExchange (11)
                  :     +- BroadcastExchange (17)
                  :        +- * Filter (16)
                  :           +- * ColumnarToRow (15)
                  :              +- Scan parquet spark_catalog.default.store (14)
                  +- BroadcastExchange (23)
                     +- * Filter (22)
                        +- * ColumnarToRow (21)
                           +- Scan parquet spark_catalog.default.item (20)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#10, [id=#11]), xxhash64(ss_cdemo_sk#2, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#12, [id=#13]), xxhash64(ss_store_sk#3, 42)))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_marital_status,S), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Condition : ((((((isnotnull(cd_gender#15) AND isnotnull(cd_marital_status#16)) AND isnotnull(cd_education_status#17)) AND (cd_gender#15 = M)) AND (cd_marital_status#16 = S)) AND (cd_education_status#17 = College             )) AND isnotnull(cd_demo_sk#14))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#14]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join type: Inner
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#14]

(11) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#18]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(13) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#18]

(14) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#19, s_state#20]

(16) Filter [codegen id : 3]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(17) BroadcastExchange
Input [2]: [s_store_sk#19, s_state#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#19]
Join type: Inner
Join condition: None

(19) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#20]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#19, s_state#20]

(20) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#21, i_item_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]

(22) Filter [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]
Condition : isnotnull(i_item_sk#21)

(23) BroadcastExchange
Input [2]: [i_item_sk#21, i_item_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(25) Project [codegen id : 5]
Output [6]: [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#22, s_state#20]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#20, i_item_sk#21, i_item_id#22]

(26) Expand [codegen id : 5]
Input [6]: [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#22, s_state#20]
Arguments: [[ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#22, s_state#20, 0], [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#22, null, 1], [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, null, null, 3]], [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#23, s_state#24, spark_grouping_id#25]

(27) HashAggregate [codegen id : 5]
Input [7]: [ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_id#23, s_state#24, spark_grouping_id#25]
Keys [3]: [i_item_id#23, s_state#24, spark_grouping_id#25]
Functions [4]: [partial_avg(ss_quantity#4), partial_avg(UnscaledValue(ss_list_price#5)), partial_avg(UnscaledValue(ss_coupon_amt#7)), partial_avg(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [8]: [sum#26, count#27, sum#28, count#29, sum#30, count#31, sum#32, count#33]
Results [11]: [i_item_id#23, s_state#24, spark_grouping_id#25, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]

(28) Exchange
Input [11]: [i_item_id#23, s_state#24, spark_grouping_id#25, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Arguments: hashpartitioning(i_item_id#23, s_state#24, spark_grouping_id#25, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(29) HashAggregate [codegen id : 6]
Input [11]: [i_item_id#23, s_state#24, spark_grouping_id#25, sum#34, count#35, sum#36, count#37, sum#38, count#39, sum#40, count#41]
Keys [3]: [i_item_id#23, s_state#24, spark_grouping_id#25]
Functions [4]: [avg(ss_quantity#4), avg(UnscaledValue(ss_list_price#5)), avg(UnscaledValue(ss_coupon_amt#7)), avg(UnscaledValue(ss_sales_price#6))]
Aggregate Attributes [4]: [avg(ss_quantity#4)#42, avg(UnscaledValue(ss_list_price#5))#43, avg(UnscaledValue(ss_coupon_amt#7))#44, avg(UnscaledValue(ss_sales_price#6))#45]
Results [7]: [i_item_id#23, s_state#24, cast((shiftright(spark_grouping_id#25, 0) & 1) as tinyint) AS g_state#46, avg(ss_quantity#4)#42 AS agg1#47, cast((avg(UnscaledValue(ss_list_price#5))#43 / 100.0) as decimal(11,6)) AS agg2#48, cast((avg(UnscaledValue(ss_coupon_amt#7))#44 / 100.0) as decimal(11,6)) AS agg3#49, cast((avg(UnscaledValue(ss_sales_price#6))#45 / 100.0) as decimal(11,6)) AS agg4#50]

(30) TakeOrderedAndProject
Input [7]: [i_item_id#23, s_state#24, g_state#46, agg1#47, agg2#48, agg3#49, agg4#50]
Arguments: 100, [i_item_id#23 ASC NULLS FIRST, s_state#24 ASC NULLS FIRST], [i_item_id#23, s_state#24, g_state#46, agg1#47, agg2#48, agg3#49, agg4#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (37)
+- Exchange (36)
   +- ObjectHashAggregate (35)
      +- * Project (34)
         +- * Filter (33)
            +- * ColumnarToRow (32)
               +- Scan parquet spark_catalog.default.customer_demographics (31)


(31) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_marital_status,S), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(32) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(33) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Condition : ((((((isnotnull(cd_gender#15) AND isnotnull(cd_marital_status#16)) AND isnotnull(cd_education_status#17)) AND (cd_gender#15 = M)) AND (cd_marital_status#16 = S)) AND (cd_education_status#17 = College             )) AND isnotnull(cd_demo_sk#14))

(34) Project [codegen id : 1]
Output [1]: [cd_demo_sk#14]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(35) ObjectHashAggregate
Input [1]: [cd_demo_sk#14]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)]
Aggregate Attributes [1]: [buf#51]
Results [1]: [buf#52]

(36) Exchange
Input [1]: [buf#52]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(37) ObjectHashAggregate
Input [1]: [buf#52]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)#53]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)#53 AS bloomFilter#54]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
ObjectHashAggregate (43)
+- Exchange (42)
   +- ObjectHashAggregate (41)
      +- * Filter (40)
         +- * ColumnarToRow (39)
            +- Scan parquet spark_catalog.default.store (38)


(38) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(39) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#19, s_state#20]

(40) Filter [codegen id : 1]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(41) ObjectHashAggregate
Input [2]: [s_store_sk#19, s_state#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [buf#55]
Results [1]: [buf#56]

(42) Exchange
Input [1]: [buf#56]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=6]

(43) ObjectHashAggregate
Input [1]: [buf#56]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)#57]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)#57 AS bloomFilter#58]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (48)
+- * Project (47)
   +- * Filter (46)
      +- * ColumnarToRow (45)
         +- Scan parquet spark_catalog.default.date_dim (44)


(44) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#18, d_year#59]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2002), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(45) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#18, d_year#59]

(46) Filter [codegen id : 1]
Input [2]: [d_date_sk#18, d_year#59]
Condition : ((isnotnull(d_year#59) AND (d_year#59 = 2002)) AND isnotnull(d_date_sk#18))

(47) Project [codegen id : 1]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_year#59]

(48) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


