== Physical Plan ==
TakeOrderedAndProject (41)
+- * HashAggregate (40)
   +- Exchange (39)
      +- * HashAggregate (38)
         +- * Project (37)
            +- * SortMergeJoin Inner (36)
               :- * Sort (21)
               :  +- Exchange (20)
               :     +- * Project (19)
               :        +- * BroadcastHashJoin Inner BuildRight (18)
               :           :- * Project (13)
               :           :  +- * BroadcastHashJoin Inner BuildRight (12)
               :           :     :- * Project (10)
               :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
               :           :     :     :- * Filter (3)
               :           :     :     :  +- * ColumnarToRow (2)
               :           :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
               :           :     :     +- BroadcastExchange (8)
               :           :     :        +- * Project (7)
               :           :     :           +- * Filter (6)
               :           :     :              +- * ColumnarToRow (5)
               :           :     :                 +- Scan parquet spark_catalog.default.item (4)
               :           :     +- ReusedExchange (11)
               :           +- BroadcastExchange (17)
               :              +- * Filter (16)
               :                 +- * ColumnarToRow (15)
               :                    +- Scan parquet spark_catalog.default.store (14)
               +- * Sort (35)
                  +- Exchange (34)
                     +- * Project (33)
                        +- * SortMergeJoin Inner (32)
                           :- * Sort (26)
                           :  +- Exchange (25)
                           :     +- * Filter (24)
                           :        +- * ColumnarToRow (23)
                           :           +- Scan parquet spark_catalog.default.customer (22)
                           +- * Sort (31)
                              +- Exchange (30)
                                 +- * Filter (29)
                                    +- * ColumnarToRow (28)
                                       +- Scan parquet spark_catalog.default.customer_address (27)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_customer_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_customer_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_sold_date_sk#5]
Condition : (((isnotnull(ss_item_sk#1) AND isnotnull(ss_customer_sk#2)) AND isnotnull(ss_store_sk#3)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#7, [id=#8]), xxhash64(ss_item_sk#1, 42)))

(4) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(5) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]

(6) Filter [codegen id : 1]
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Condition : ((isnotnull(i_manager_id#14) AND (i_manager_id#14 = 8)) AND isnotnull(i_item_sk#9))

(7) Project [codegen id : 1]
Output [5]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]

(8) BroadcastExchange
Input [5]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#9]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [8]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_sold_date_sk#5, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Input [10]: [ss_item_sk#1, ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_sold_date_sk#5, i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]

(11) ReusedExchange [Reuses operator id: 53]
Output [1]: [d_date_sk#15]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#15]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [7]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Input [9]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, ss_sold_date_sk#5, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, d_date_sk#15]

(14) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#16, s_zip#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_zip), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_zip:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#16, s_zip#17]

(16) Filter [codegen id : 3]
Input [2]: [s_store_sk#16, s_zip#17]
Condition : (isnotnull(s_zip#17) AND isnotnull(s_store_sk#16))

(17) BroadcastExchange
Input [2]: [s_store_sk#16, s_zip#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#16]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [7]: [ss_customer_sk#2, ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, s_zip#17]
Input [9]: [ss_customer_sk#2, ss_store_sk#3, ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, s_store_sk#16, s_zip#17]

(20) Exchange
Input [7]: [ss_customer_sk#2, ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, s_zip#17]
Arguments: hashpartitioning(ss_customer_sk#2, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 5]
Input [7]: [ss_customer_sk#2, ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, s_zip#17]
Arguments: [ss_customer_sk#2 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.customer
Output [2]: [c_customer_sk#18, c_current_addr_sk#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [IsNotNull(c_customer_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_addr_sk:int>

(23) ColumnarToRow [codegen id : 6]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]

(24) Filter [codegen id : 6]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Condition : (isnotnull(c_customer_sk#18) AND isnotnull(c_current_addr_sk#19))

(25) Exchange
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: hashpartitioning(c_current_addr_sk#19, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(26) Sort [codegen id : 7]
Input [2]: [c_customer_sk#18, c_current_addr_sk#19]
Arguments: [c_current_addr_sk#19 ASC NULLS FIRST], false, 0

(27) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#20, ca_zip#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_address_sk), IsNotNull(ca_zip)]
ReadSchema: struct<ca_address_sk:int,ca_zip:string>

(28) ColumnarToRow [codegen id : 8]
Input [2]: [ca_address_sk#20, ca_zip#21]

(29) Filter [codegen id : 8]
Input [2]: [ca_address_sk#20, ca_zip#21]
Condition : (isnotnull(ca_address_sk#20) AND isnotnull(ca_zip#21))

(30) Exchange
Input [2]: [ca_address_sk#20, ca_zip#21]
Arguments: hashpartitioning(ca_address_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(31) Sort [codegen id : 9]
Input [2]: [ca_address_sk#20, ca_zip#21]
Arguments: [ca_address_sk#20 ASC NULLS FIRST], false, 0

(32) SortMergeJoin [codegen id : 10]
Left keys [1]: [c_current_addr_sk#19]
Right keys [1]: [ca_address_sk#20]
Join type: Inner
Join condition: None

(33) Project [codegen id : 10]
Output [2]: [c_customer_sk#18, ca_zip#21]
Input [4]: [c_customer_sk#18, c_current_addr_sk#19, ca_address_sk#20, ca_zip#21]

(34) Exchange
Input [2]: [c_customer_sk#18, ca_zip#21]
Arguments: hashpartitioning(c_customer_sk#18, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(35) Sort [codegen id : 11]
Input [2]: [c_customer_sk#18, ca_zip#21]
Arguments: [c_customer_sk#18 ASC NULLS FIRST], false, 0

(36) SortMergeJoin [codegen id : 12]
Left keys [1]: [ss_customer_sk#2]
Right keys [1]: [c_customer_sk#18]
Join type: Inner
Join condition: NOT (substr(ca_zip#21, 1, 5) = substr(s_zip#17, 1, 5))

(37) Project [codegen id : 12]
Output [5]: [ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Input [9]: [ss_customer_sk#2, ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, s_zip#17, c_customer_sk#18, ca_zip#21]

(38) HashAggregate [codegen id : 12]
Input [5]: [ss_ext_sales_price#4, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Keys [4]: [i_brand#11, i_brand_id#10, i_manufact_id#12, i_manufact#13]
Functions [1]: [partial_sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [1]: [sum#22]
Results [5]: [i_brand#11, i_brand_id#10, i_manufact_id#12, i_manufact#13, sum#23]

(39) Exchange
Input [5]: [i_brand#11, i_brand_id#10, i_manufact_id#12, i_manufact#13, sum#23]
Arguments: hashpartitioning(i_brand#11, i_brand_id#10, i_manufact_id#12, i_manufact#13, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(40) HashAggregate [codegen id : 13]
Input [5]: [i_brand#11, i_brand_id#10, i_manufact_id#12, i_manufact#13, sum#23]
Keys [4]: [i_brand#11, i_brand_id#10, i_manufact_id#12, i_manufact#13]
Functions [1]: [sum(UnscaledValue(ss_ext_sales_price#4))]
Aggregate Attributes [1]: [sum(UnscaledValue(ss_ext_sales_price#4))#24]
Results [5]: [i_brand_id#10 AS brand_id#25, i_brand#11 AS brand#26, i_manufact_id#12, i_manufact#13, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#4))#24,17,2) AS ext_price#27]

(41) TakeOrderedAndProject
Input [5]: [brand_id#25, brand#26, i_manufact_id#12, i_manufact#13, ext_price#27]
Arguments: 100, [ext_price#27 DESC NULLS LAST, brand#26 ASC NULLS FIRST, brand_id#25 ASC NULLS FIRST, i_manufact_id#12 ASC NULLS FIRST, i_manufact#13 ASC NULLS FIRST], [brand_id#25, brand#26, i_manufact_id#12, i_manufact#13, ext_price#27]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (48)
+- Exchange (47)
   +- ObjectHashAggregate (46)
      +- * Project (45)
         +- * Filter (44)
            +- * ColumnarToRow (43)
               +- Scan parquet spark_catalog.default.item (42)


(42) Scan parquet spark_catalog.default.item
Output [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_manager_id), EqualTo(i_manager_id,8), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_brand_id:int,i_brand:string,i_manufact_id:int,i_manufact:string,i_manager_id:int>

(43) ColumnarToRow [codegen id : 1]
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]

(44) Filter [codegen id : 1]
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]
Condition : ((isnotnull(i_manager_id#14) AND (i_manager_id#14 = 8)) AND isnotnull(i_item_sk#9))

(45) Project [codegen id : 1]
Output [5]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Input [6]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13, i_manager_id#14]

(46) ObjectHashAggregate
Input [5]: [i_item_sk#9, i_brand_id#10, i_brand#11, i_manufact_id#12, i_manufact#13]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(i_item_sk#9, 42), 2056, 16448, 0, 0)]
Aggregate Attributes [1]: [buf#28]
Results [1]: [buf#29]

(47) Exchange
Input [1]: [buf#29]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(48) ObjectHashAggregate
Input [1]: [buf#29]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(i_item_sk#9, 42), 2056, 16448, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(i_item_sk#9, 42), 2056, 16448, 0, 0)#30]
Results [1]: [bloom_filter_agg(xxhash64(i_item_sk#9, 42), 2056, 16448, 0, 0)#30 AS bloomFilter#31]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (53)
+- * Project (52)
   +- * Filter (51)
      +- * ColumnarToRow (50)
         +- Scan parquet spark_catalog.default.date_dim (49)


(49) Scan parquet spark_catalog.default.date_dim
Output [3]: [d_date_sk#15, d_year#32, d_moy#33]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_moy), IsNotNull(d_year), EqualTo(d_moy,11), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int,d_moy:int>

(50) ColumnarToRow [codegen id : 1]
Input [3]: [d_date_sk#15, d_year#32, d_moy#33]

(51) Filter [codegen id : 1]
Input [3]: [d_date_sk#15, d_year#32, d_moy#33]
Condition : ((((isnotnull(d_moy#33) AND isnotnull(d_year#32)) AND (d_moy#33 = 11)) AND (d_year#32 = 1998)) AND isnotnull(d_date_sk#15))

(52) Project [codegen id : 1]
Output [1]: [d_date_sk#15]
Input [3]: [d_date_sk#15, d_year#32, d_moy#33]

(53) BroadcastExchange
Input [1]: [d_date_sk#15]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


