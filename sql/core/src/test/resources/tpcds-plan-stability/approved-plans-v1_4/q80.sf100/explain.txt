== Physical Plan ==
TakeOrderedAndProject (99)
+- * HashAggregate (98)
   +- Exchange (97)
      +- * HashAggregate (96)
         +- * Expand (95)
            +- Union (94)
               :- * HashAggregate (31)
               :  +- Exchange (30)
               :     +- * HashAggregate (29)
               :        +- * Project (28)
               :           +- * BroadcastHashJoin Inner BuildRight (27)
               :              :- * Project (22)
               :              :  +- * BroadcastHashJoin Inner BuildRight (21)
               :              :     :- * Project (19)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (18)
               :              :     :     :- * Project (16)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (15)
               :              :     :     :     :- * Project (13)
               :              :     :     :     :  +- * SortMergeJoin LeftOuter (12)
               :              :     :     :     :     :- * Sort (5)
               :              :     :     :     :     :  +- Exchange (4)
               :              :     :     :     :     :     +- * Filter (3)
               :              :     :     :     :     :        +- * ColumnarToRow (2)
               :              :     :     :     :     :           +- Scan parquet spark_catalog.default.store_sales (1)
               :              :     :     :     :     +- * Sort (11)
               :              :     :     :     :        +- Exchange (10)
               :              :     :     :     :           +- * Project (9)
               :              :     :     :     :              +- * Filter (8)
               :              :     :     :     :                 +- * ColumnarToRow (7)
               :              :     :     :     :                    +- Scan parquet spark_catalog.default.store_returns (6)
               :              :     :     :     +- ReusedExchange (14)
               :              :     :     +- ReusedExchange (17)
               :              :     +- ReusedExchange (20)
               :              +- BroadcastExchange (26)
               :                 +- * Filter (25)
               :                    +- * ColumnarToRow (24)
               :                       +- Scan parquet spark_catalog.default.store (23)
               :- * HashAggregate (62)
               :  +- Exchange (61)
               :     +- * HashAggregate (60)
               :        +- * Project (59)
               :           +- * BroadcastHashJoin Inner BuildRight (58)
               :              :- * Project (53)
               :              :  +- * BroadcastHashJoin Inner BuildRight (52)
               :              :     :- * Project (50)
               :              :     :  +- * BroadcastHashJoin Inner BuildRight (49)
               :              :     :     :- * Project (47)
               :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (46)
               :              :     :     :     :- * Project (44)
               :              :     :     :     :  +- * SortMergeJoin LeftOuter (43)
               :              :     :     :     :     :- * Sort (36)
               :              :     :     :     :     :  +- Exchange (35)
               :              :     :     :     :     :     +- * Filter (34)
               :              :     :     :     :     :        +- * ColumnarToRow (33)
               :              :     :     :     :     :           +- Scan parquet spark_catalog.default.catalog_sales (32)
               :              :     :     :     :     +- * Sort (42)
               :              :     :     :     :        +- Exchange (41)
               :              :     :     :     :           +- * Project (40)
               :              :     :     :     :              +- * Filter (39)
               :              :     :     :     :                 +- * ColumnarToRow (38)
               :              :     :     :     :                    +- Scan parquet spark_catalog.default.catalog_returns (37)
               :              :     :     :     +- ReusedExchange (45)
               :              :     :     +- ReusedExchange (48)
               :              :     +- ReusedExchange (51)
               :              +- BroadcastExchange (57)
               :                 +- * Filter (56)
               :                    +- * ColumnarToRow (55)
               :                       +- Scan parquet spark_catalog.default.catalog_page (54)
               +- * HashAggregate (93)
                  +- Exchange (92)
                     +- * HashAggregate (91)
                        +- * Project (90)
                           +- * BroadcastHashJoin Inner BuildRight (89)
                              :- * Project (84)
                              :  +- * BroadcastHashJoin Inner BuildRight (83)
                              :     :- * Project (81)
                              :     :  +- * BroadcastHashJoin Inner BuildRight (80)
                              :     :     :- * Project (78)
                              :     :     :  +- * BroadcastHashJoin Inner BuildRight (77)
                              :     :     :     :- * Project (75)
                              :     :     :     :  +- * SortMergeJoin LeftOuter (74)
                              :     :     :     :     :- * Sort (67)
                              :     :     :     :     :  +- Exchange (66)
                              :     :     :     :     :     +- * Filter (65)
                              :     :     :     :     :        +- * ColumnarToRow (64)
                              :     :     :     :     :           +- Scan parquet spark_catalog.default.web_sales (63)
                              :     :     :     :     +- * Sort (73)
                              :     :     :     :        +- Exchange (72)
                              :     :     :     :           +- * Project (71)
                              :     :     :     :              +- * Filter (70)
                              :     :     :     :                 +- * ColumnarToRow (69)
                              :     :     :     :                    +- Scan parquet spark_catalog.default.web_returns (68)
                              :     :     :     +- ReusedExchange (76)
                              :     :     +- ReusedExchange (79)
                              :     +- ReusedExchange (82)
                              +- BroadcastExchange (88)
                                 +- * Filter (87)
                                    +- * ColumnarToRow (86)
                                       +- Scan parquet spark_catalog.default.web_site (85)


(1) Scan parquet spark_catalog.default.store_sales
Output [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#7), dynamicpruningexpression(ss_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ss_store_sk), IsNotNull(ss_item_sk), IsNotNull(ss_promo_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_promo_sk:int,ss_ticket_number:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]

(3) Filter [codegen id : 1]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Condition : ((((isnotnull(ss_store_sk#2) AND isnotnull(ss_item_sk#1)) AND isnotnull(ss_promo_sk#3)) AND dynamicpruningexpression(ss_item_sk#1 IN dynamicpruning#9)) AND dynamicpruningexpression(ss_promo_sk#3 IN dynamicpruning#10))

(4) Exchange
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: hashpartitioning(ss_item_sk#1, ss_ticket_number#4, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(5) Sort [codegen id : 2]
Input [7]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7]
Arguments: [ss_item_sk#1 ASC NULLS FIRST, ss_ticket_number#4 ASC NULLS FIRST], false, 0

(6) Scan parquet spark_catalog.default.store_returns
Output [5]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store_returns]
PushedFilters: [IsNotNull(sr_item_sk), IsNotNull(sr_ticket_number)]
ReadSchema: struct<sr_item_sk:int,sr_ticket_number:int,sr_return_amt:decimal(7,2),sr_net_loss:decimal(7,2)>

(7) ColumnarToRow [codegen id : 3]
Input [5]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(8) Filter [codegen id : 3]
Input [5]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]
Condition : (isnotnull(sr_item_sk#11) AND isnotnull(sr_ticket_number#12))

(9) Project [codegen id : 3]
Output [4]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14]
Input [5]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14, sr_returned_date_sk#15]

(10) Exchange
Input [4]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14]
Arguments: hashpartitioning(sr_item_sk#11, sr_ticket_number#12, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [4]: [sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14]
Arguments: [sr_item_sk#11 ASC NULLS FIRST, sr_ticket_number#12 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 9]
Left keys [2]: [ss_item_sk#1, ss_ticket_number#4]
Right keys [2]: [sr_item_sk#11, sr_ticket_number#12]
Join type: LeftOuter
Join condition: None

(13) Project [codegen id : 9]
Output [8]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#13, sr_net_loss#14]
Input [11]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ticket_number#4, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_item_sk#11, sr_ticket_number#12, sr_return_amt#13, sr_net_loss#14]

(14) ReusedExchange [Reuses operator id: 104]
Output [1]: [i_item_sk#16]

(15) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#16]
Join type: Inner
Join condition: None

(16) Project [codegen id : 9]
Output [7]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#13, sr_net_loss#14]
Input [9]: [ss_item_sk#1, ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#13, sr_net_loss#14, i_item_sk#16]

(17) ReusedExchange [Reuses operator id: 109]
Output [1]: [p_promo_sk#17]

(18) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_promo_sk#3]
Right keys [1]: [p_promo_sk#17]
Join type: Inner
Join condition: None

(19) Project [codegen id : 9]
Output [6]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#13, sr_net_loss#14]
Input [8]: [ss_store_sk#2, ss_promo_sk#3, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#13, sr_net_loss#14, p_promo_sk#17]

(20) ReusedExchange [Reuses operator id: 114]
Output [1]: [d_date_sk#18]

(21) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_sold_date_sk#7]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(22) Project [codegen id : 9]
Output [5]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#13, sr_net_loss#14]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, ss_sold_date_sk#7, sr_return_amt#13, sr_net_loss#14, d_date_sk#18]

(23) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_store_id#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_store_id:string>

(24) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#19, s_store_id#20]

(25) Filter [codegen id : 8]
Input [2]: [s_store_sk#19, s_store_id#20]
Condition : isnotnull(s_store_sk#19)

(26) BroadcastExchange
Input [2]: [s_store_sk#19, s_store_id#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(27) BroadcastHashJoin [codegen id : 9]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#19]
Join type: Inner
Join condition: None

(28) Project [codegen id : 9]
Output [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#13, sr_net_loss#14, s_store_id#20]
Input [7]: [ss_store_sk#2, ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#13, sr_net_loss#14, s_store_sk#19, s_store_id#20]

(29) HashAggregate [codegen id : 9]
Input [5]: [ss_ext_sales_price#5, ss_net_profit#6, sr_return_amt#13, sr_net_loss#14, s_store_id#20]
Keys [1]: [s_store_id#20]
Functions [3]: [partial_sum(UnscaledValue(ss_ext_sales_price#5)), partial_sum(coalesce(cast(sr_return_amt#13 as decimal(12,2)), 0.00)), partial_sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#14 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#21, sum#22, isEmpty#23, sum#24, isEmpty#25]
Results [6]: [s_store_id#20, sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]

(30) Exchange
Input [6]: [s_store_id#20, sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]
Arguments: hashpartitioning(s_store_id#20, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(31) HashAggregate [codegen id : 10]
Input [6]: [s_store_id#20, sum#26, sum#27, isEmpty#28, sum#29, isEmpty#30]
Keys [1]: [s_store_id#20]
Functions [3]: [sum(UnscaledValue(ss_ext_sales_price#5)), sum(coalesce(cast(sr_return_amt#13 as decimal(12,2)), 0.00)), sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#14 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ss_ext_sales_price#5))#31, sum(coalesce(cast(sr_return_amt#13 as decimal(12,2)), 0.00))#32, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#14 as decimal(12,2)), 0.00)))#33]
Results [5]: [MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#5))#31,17,2) AS sales#34, sum(coalesce(cast(sr_return_amt#13 as decimal(12,2)), 0.00))#32 AS returns#35, sum((ss_net_profit#6 - coalesce(cast(sr_net_loss#14 as decimal(12,2)), 0.00)))#33 AS profit#36, store channel AS channel#37, concat(store, s_store_id#20) AS id#38]

(32) Scan parquet spark_catalog.default.catalog_sales
Output [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#45), dynamicpruningexpression(cs_sold_date_sk#45 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(cs_catalog_page_sk), IsNotNull(cs_item_sk), IsNotNull(cs_promo_sk)]
ReadSchema: struct<cs_catalog_page_sk:int,cs_item_sk:int,cs_promo_sk:int,cs_order_number:int,cs_ext_sales_price:decimal(7,2),cs_net_profit:decimal(7,2)>

(33) ColumnarToRow [codegen id : 11]
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]

(34) Filter [codegen id : 11]
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Condition : ((((isnotnull(cs_catalog_page_sk#39) AND isnotnull(cs_item_sk#40)) AND isnotnull(cs_promo_sk#41)) AND dynamicpruningexpression(cs_item_sk#40 IN dynamicpruning#9)) AND dynamicpruningexpression(cs_promo_sk#41 IN dynamicpruning#10))

(35) Exchange
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Arguments: hashpartitioning(cs_item_sk#40, cs_order_number#42, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(36) Sort [codegen id : 12]
Input [7]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45]
Arguments: [cs_item_sk#40 ASC NULLS FIRST, cs_order_number#42 ASC NULLS FIRST], false, 0

(37) Scan parquet spark_catalog.default.catalog_returns
Output [5]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49, cr_returned_date_sk#50]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_returns]
PushedFilters: [IsNotNull(cr_item_sk), IsNotNull(cr_order_number)]
ReadSchema: struct<cr_item_sk:int,cr_order_number:int,cr_return_amount:decimal(7,2),cr_net_loss:decimal(7,2)>

(38) ColumnarToRow [codegen id : 13]
Input [5]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49, cr_returned_date_sk#50]

(39) Filter [codegen id : 13]
Input [5]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49, cr_returned_date_sk#50]
Condition : (isnotnull(cr_item_sk#46) AND isnotnull(cr_order_number#47))

(40) Project [codegen id : 13]
Output [4]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]
Input [5]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49, cr_returned_date_sk#50]

(41) Exchange
Input [4]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]
Arguments: hashpartitioning(cr_item_sk#46, cr_order_number#47, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(42) Sort [codegen id : 14]
Input [4]: [cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]
Arguments: [cr_item_sk#46 ASC NULLS FIRST, cr_order_number#47 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 19]
Left keys [2]: [cs_item_sk#40, cs_order_number#42]
Right keys [2]: [cr_item_sk#46, cr_order_number#47]
Join type: LeftOuter
Join condition: None

(44) Project [codegen id : 19]
Output [8]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49]
Input [11]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_order_number#42, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_item_sk#46, cr_order_number#47, cr_return_amount#48, cr_net_loss#49]

(45) ReusedExchange [Reuses operator id: 104]
Output [1]: [i_item_sk#51]

(46) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_item_sk#40]
Right keys [1]: [i_item_sk#51]
Join type: Inner
Join condition: None

(47) Project [codegen id : 19]
Output [7]: [cs_catalog_page_sk#39, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49]
Input [9]: [cs_catalog_page_sk#39, cs_item_sk#40, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49, i_item_sk#51]

(48) ReusedExchange [Reuses operator id: 109]
Output [1]: [p_promo_sk#52]

(49) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_promo_sk#41]
Right keys [1]: [p_promo_sk#52]
Join type: Inner
Join condition: None

(50) Project [codegen id : 19]
Output [6]: [cs_catalog_page_sk#39, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49]
Input [8]: [cs_catalog_page_sk#39, cs_promo_sk#41, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49, p_promo_sk#52]

(51) ReusedExchange [Reuses operator id: 114]
Output [1]: [d_date_sk#53]

(52) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_sold_date_sk#45]
Right keys [1]: [d_date_sk#53]
Join type: Inner
Join condition: None

(53) Project [codegen id : 19]
Output [5]: [cs_catalog_page_sk#39, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49]
Input [7]: [cs_catalog_page_sk#39, cs_ext_sales_price#43, cs_net_profit#44, cs_sold_date_sk#45, cr_return_amount#48, cr_net_loss#49, d_date_sk#53]

(54) Scan parquet spark_catalog.default.catalog_page
Output [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Batched: true
Location [not included in comparison]/{warehouse_dir}/catalog_page]
PushedFilters: [IsNotNull(cp_catalog_page_sk)]
ReadSchema: struct<cp_catalog_page_sk:int,cp_catalog_page_id:string>

(55) ColumnarToRow [codegen id : 18]
Input [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]

(56) Filter [codegen id : 18]
Input [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Condition : isnotnull(cp_catalog_page_sk#54)

(57) BroadcastExchange
Input [2]: [cp_catalog_page_sk#54, cp_catalog_page_id#55]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(58) BroadcastHashJoin [codegen id : 19]
Left keys [1]: [cs_catalog_page_sk#39]
Right keys [1]: [cp_catalog_page_sk#54]
Join type: Inner
Join condition: None

(59) Project [codegen id : 19]
Output [5]: [cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#55]
Input [7]: [cs_catalog_page_sk#39, cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_sk#54, cp_catalog_page_id#55]

(60) HashAggregate [codegen id : 19]
Input [5]: [cs_ext_sales_price#43, cs_net_profit#44, cr_return_amount#48, cr_net_loss#49, cp_catalog_page_id#55]
Keys [1]: [cp_catalog_page_id#55]
Functions [3]: [partial_sum(UnscaledValue(cs_ext_sales_price#43)), partial_sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00)), partial_sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#56, sum#57, isEmpty#58, sum#59, isEmpty#60]
Results [6]: [cp_catalog_page_id#55, sum#61, sum#62, isEmpty#63, sum#64, isEmpty#65]

(61) Exchange
Input [6]: [cp_catalog_page_id#55, sum#61, sum#62, isEmpty#63, sum#64, isEmpty#65]
Arguments: hashpartitioning(cp_catalog_page_id#55, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(62) HashAggregate [codegen id : 20]
Input [6]: [cp_catalog_page_id#55, sum#61, sum#62, isEmpty#63, sum#64, isEmpty#65]
Keys [1]: [cp_catalog_page_id#55]
Functions [3]: [sum(UnscaledValue(cs_ext_sales_price#43)), sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00)), sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(cs_ext_sales_price#43))#66, sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00))#67, sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))#68]
Results [5]: [MakeDecimal(sum(UnscaledValue(cs_ext_sales_price#43))#66,17,2) AS sales#69, sum(coalesce(cast(cr_return_amount#48 as decimal(12,2)), 0.00))#67 AS returns#70, sum((cs_net_profit#44 - coalesce(cast(cr_net_loss#49 as decimal(12,2)), 0.00)))#68 AS profit#71, catalog channel AS channel#72, concat(catalog_page, cp_catalog_page_id#55) AS id#73]

(63) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_order_number#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#80), dynamicpruningexpression(ws_sold_date_sk#80 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_web_site_sk), IsNotNull(ws_item_sk), IsNotNull(ws_promo_sk)]
ReadSchema: struct<ws_item_sk:int,ws_web_site_sk:int,ws_promo_sk:int,ws_order_number:int,ws_ext_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(64) ColumnarToRow [codegen id : 21]
Input [7]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_order_number#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]

(65) Filter [codegen id : 21]
Input [7]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_order_number#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Condition : ((((isnotnull(ws_web_site_sk#75) AND isnotnull(ws_item_sk#74)) AND isnotnull(ws_promo_sk#76)) AND dynamicpruningexpression(ws_item_sk#74 IN dynamicpruning#9)) AND dynamicpruningexpression(ws_promo_sk#76 IN dynamicpruning#10))

(66) Exchange
Input [7]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_order_number#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Arguments: hashpartitioning(ws_item_sk#74, ws_order_number#77, 5), ENSURE_REQUIREMENTS, [plan_id=9]

(67) Sort [codegen id : 22]
Input [7]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_order_number#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80]
Arguments: [ws_item_sk#74 ASC NULLS FIRST, ws_order_number#77 ASC NULLS FIRST], false, 0

(68) Scan parquet spark_catalog.default.web_returns
Output [5]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84, wr_returned_date_sk#85]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number)]
ReadSchema: struct<wr_item_sk:int,wr_order_number:int,wr_return_amt:decimal(7,2),wr_net_loss:decimal(7,2)>

(69) ColumnarToRow [codegen id : 23]
Input [5]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84, wr_returned_date_sk#85]

(70) Filter [codegen id : 23]
Input [5]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84, wr_returned_date_sk#85]
Condition : (isnotnull(wr_item_sk#81) AND isnotnull(wr_order_number#82))

(71) Project [codegen id : 23]
Output [4]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84]
Input [5]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84, wr_returned_date_sk#85]

(72) Exchange
Input [4]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84]
Arguments: hashpartitioning(wr_item_sk#81, wr_order_number#82, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(73) Sort [codegen id : 24]
Input [4]: [wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84]
Arguments: [wr_item_sk#81 ASC NULLS FIRST, wr_order_number#82 ASC NULLS FIRST], false, 0

(74) SortMergeJoin [codegen id : 29]
Left keys [2]: [ws_item_sk#74, ws_order_number#77]
Right keys [2]: [wr_item_sk#81, wr_order_number#82]
Join type: LeftOuter
Join condition: None

(75) Project [codegen id : 29]
Output [8]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_return_amt#83, wr_net_loss#84]
Input [11]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_order_number#77, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_item_sk#81, wr_order_number#82, wr_return_amt#83, wr_net_loss#84]

(76) ReusedExchange [Reuses operator id: 104]
Output [1]: [i_item_sk#86]

(77) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_item_sk#74]
Right keys [1]: [i_item_sk#86]
Join type: Inner
Join condition: None

(78) Project [codegen id : 29]
Output [7]: [ws_web_site_sk#75, ws_promo_sk#76, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_return_amt#83, wr_net_loss#84]
Input [9]: [ws_item_sk#74, ws_web_site_sk#75, ws_promo_sk#76, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_return_amt#83, wr_net_loss#84, i_item_sk#86]

(79) ReusedExchange [Reuses operator id: 109]
Output [1]: [p_promo_sk#87]

(80) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_promo_sk#76]
Right keys [1]: [p_promo_sk#87]
Join type: Inner
Join condition: None

(81) Project [codegen id : 29]
Output [6]: [ws_web_site_sk#75, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_return_amt#83, wr_net_loss#84]
Input [8]: [ws_web_site_sk#75, ws_promo_sk#76, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_return_amt#83, wr_net_loss#84, p_promo_sk#87]

(82) ReusedExchange [Reuses operator id: 114]
Output [1]: [d_date_sk#88]

(83) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_sold_date_sk#80]
Right keys [1]: [d_date_sk#88]
Join type: Inner
Join condition: None

(84) Project [codegen id : 29]
Output [5]: [ws_web_site_sk#75, ws_ext_sales_price#78, ws_net_profit#79, wr_return_amt#83, wr_net_loss#84]
Input [7]: [ws_web_site_sk#75, ws_ext_sales_price#78, ws_net_profit#79, ws_sold_date_sk#80, wr_return_amt#83, wr_net_loss#84, d_date_sk#88]

(85) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#89, web_site_id#90]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_site_id:string>

(86) ColumnarToRow [codegen id : 28]
Input [2]: [web_site_sk#89, web_site_id#90]

(87) Filter [codegen id : 28]
Input [2]: [web_site_sk#89, web_site_id#90]
Condition : isnotnull(web_site_sk#89)

(88) BroadcastExchange
Input [2]: [web_site_sk#89, web_site_id#90]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=11]

(89) BroadcastHashJoin [codegen id : 29]
Left keys [1]: [ws_web_site_sk#75]
Right keys [1]: [web_site_sk#89]
Join type: Inner
Join condition: None

(90) Project [codegen id : 29]
Output [5]: [ws_ext_sales_price#78, ws_net_profit#79, wr_return_amt#83, wr_net_loss#84, web_site_id#90]
Input [7]: [ws_web_site_sk#75, ws_ext_sales_price#78, ws_net_profit#79, wr_return_amt#83, wr_net_loss#84, web_site_sk#89, web_site_id#90]

(91) HashAggregate [codegen id : 29]
Input [5]: [ws_ext_sales_price#78, ws_net_profit#79, wr_return_amt#83, wr_net_loss#84, web_site_id#90]
Keys [1]: [web_site_id#90]
Functions [3]: [partial_sum(UnscaledValue(ws_ext_sales_price#78)), partial_sum(coalesce(cast(wr_return_amt#83 as decimal(12,2)), 0.00)), partial_sum((ws_net_profit#79 - coalesce(cast(wr_net_loss#84 as decimal(12,2)), 0.00)))]
Aggregate Attributes [5]: [sum#91, sum#92, isEmpty#93, sum#94, isEmpty#95]
Results [6]: [web_site_id#90, sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]

(92) Exchange
Input [6]: [web_site_id#90, sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Arguments: hashpartitioning(web_site_id#90, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(93) HashAggregate [codegen id : 30]
Input [6]: [web_site_id#90, sum#96, sum#97, isEmpty#98, sum#99, isEmpty#100]
Keys [1]: [web_site_id#90]
Functions [3]: [sum(UnscaledValue(ws_ext_sales_price#78)), sum(coalesce(cast(wr_return_amt#83 as decimal(12,2)), 0.00)), sum((ws_net_profit#79 - coalesce(cast(wr_net_loss#84 as decimal(12,2)), 0.00)))]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_sales_price#78))#101, sum(coalesce(cast(wr_return_amt#83 as decimal(12,2)), 0.00))#102, sum((ws_net_profit#79 - coalesce(cast(wr_net_loss#84 as decimal(12,2)), 0.00)))#103]
Results [5]: [MakeDecimal(sum(UnscaledValue(ws_ext_sales_price#78))#101,17,2) AS sales#104, sum(coalesce(cast(wr_return_amt#83 as decimal(12,2)), 0.00))#102 AS returns#105, sum((ws_net_profit#79 - coalesce(cast(wr_net_loss#84 as decimal(12,2)), 0.00)))#103 AS profit#106, web channel AS channel#107, concat(web_site, web_site_id#90) AS id#108]

(94) Union

(95) Expand [codegen id : 31]
Input [5]: [sales#34, returns#35, profit#36, channel#37, id#38]
Arguments: [[sales#34, returns#35, profit#36, channel#37, id#38, 0], [sales#34, returns#35, profit#36, channel#37, null, 1], [sales#34, returns#35, profit#36, null, null, 3]], [sales#34, returns#35, profit#36, channel#109, id#110, spark_grouping_id#111]

(96) HashAggregate [codegen id : 31]
Input [6]: [sales#34, returns#35, profit#36, channel#109, id#110, spark_grouping_id#111]
Keys [3]: [channel#109, id#110, spark_grouping_id#111]
Functions [3]: [partial_sum(sales#34), partial_sum(returns#35), partial_sum(profit#36)]
Aggregate Attributes [6]: [sum#112, isEmpty#113, sum#114, isEmpty#115, sum#116, isEmpty#117]
Results [9]: [channel#109, id#110, spark_grouping_id#111, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]

(97) Exchange
Input [9]: [channel#109, id#110, spark_grouping_id#111, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Arguments: hashpartitioning(channel#109, id#110, spark_grouping_id#111, 5), ENSURE_REQUIREMENTS, [plan_id=13]

(98) HashAggregate [codegen id : 32]
Input [9]: [channel#109, id#110, spark_grouping_id#111, sum#118, isEmpty#119, sum#120, isEmpty#121, sum#122, isEmpty#123]
Keys [3]: [channel#109, id#110, spark_grouping_id#111]
Functions [3]: [sum(sales#34), sum(returns#35), sum(profit#36)]
Aggregate Attributes [3]: [sum(sales#34)#124, sum(returns#35)#125, sum(profit#36)#126]
Results [5]: [channel#109, id#110, sum(sales#34)#124 AS sales#127, sum(returns#35)#125 AS returns#128, sum(profit#36)#126 AS profit#129]

(99) TakeOrderedAndProject
Input [5]: [channel#109, id#110, sales#127, returns#128, profit#129]
Arguments: 100, [channel#109 ASC NULLS FIRST, id#110 ASC NULLS FIRST], [channel#109, id#110, sales#127, returns#128, profit#129]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ss_item_sk#1 IN dynamicpruning#9
BroadcastExchange (104)
+- * Project (103)
   +- * Filter (102)
      +- * ColumnarToRow (101)
         +- Scan parquet spark_catalog.default.item (100)


(100) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#16, i_current_price#130]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_current_price), GreaterThan(i_current_price,50.00), IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_current_price:decimal(7,2)>

(101) ColumnarToRow [codegen id : 1]
Input [2]: [i_item_sk#16, i_current_price#130]

(102) Filter [codegen id : 1]
Input [2]: [i_item_sk#16, i_current_price#130]
Condition : ((isnotnull(i_current_price#130) AND (i_current_price#130 > 50.00)) AND isnotnull(i_item_sk#16))

(103) Project [codegen id : 1]
Output [1]: [i_item_sk#16]
Input [2]: [i_item_sk#16, i_current_price#130]

(104) BroadcastExchange
Input [1]: [i_item_sk#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=14]

Subquery:2 Hosting operator id = 3 Hosting Expression = ss_promo_sk#3 IN dynamicpruning#10
BroadcastExchange (109)
+- * Project (108)
   +- * Filter (107)
      +- * ColumnarToRow (106)
         +- Scan parquet spark_catalog.default.promotion (105)


(105) Scan parquet spark_catalog.default.promotion
Output [2]: [p_promo_sk#17, p_channel_tv#131]
Batched: true
Location [not included in comparison]/{warehouse_dir}/promotion]
PushedFilters: [IsNotNull(p_channel_tv), EqualTo(p_channel_tv,N), IsNotNull(p_promo_sk)]
ReadSchema: struct<p_promo_sk:int,p_channel_tv:string>

(106) ColumnarToRow [codegen id : 1]
Input [2]: [p_promo_sk#17, p_channel_tv#131]

(107) Filter [codegen id : 1]
Input [2]: [p_promo_sk#17, p_channel_tv#131]
Condition : ((isnotnull(p_channel_tv#131) AND (p_channel_tv#131 = N)) AND isnotnull(p_promo_sk#17))

(108) Project [codegen id : 1]
Output [1]: [p_promo_sk#17]
Input [2]: [p_promo_sk#17, p_channel_tv#131]

(109) BroadcastExchange
Input [1]: [p_promo_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=15]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (114)
+- * Project (113)
   +- * Filter (112)
      +- * ColumnarToRow (111)
         +- Scan parquet spark_catalog.default.date_dim (110)


(110) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#18, d_date#132]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,2000-08-23), LessThanOrEqual(d_date,2000-09-22), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(111) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#18, d_date#132]

(112) Filter [codegen id : 1]
Input [2]: [d_date_sk#18, d_date#132]
Condition : (((isnotnull(d_date#132) AND (d_date#132 >= 2000-08-23)) AND (d_date#132 <= 2000-09-22)) AND isnotnull(d_date_sk#18))

(113) Project [codegen id : 1]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_date#132]

(114) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=16]

Subquery:4 Hosting operator id = 34 Hosting Expression = cs_item_sk#40 IN dynamicpruning#9

Subquery:5 Hosting operator id = 34 Hosting Expression = cs_promo_sk#41 IN dynamicpruning#10

Subquery:6 Hosting operator id = 32 Hosting Expression = cs_sold_date_sk#45 IN dynamicpruning#8

Subquery:7 Hosting operator id = 65 Hosting Expression = ws_item_sk#74 IN dynamicpruning#9

Subquery:8 Hosting operator id = 65 Hosting Expression = ws_promo_sk#76 IN dynamicpruning#10

Subquery:9 Hosting operator id = 63 Hosting Expression = ws_sold_date_sk#80 IN dynamicpruning#8


