== Physical Plan ==
* HashAggregate (33)
+- Exchange (32)
   +- * HashAggregate (31)
      +- * HashAggregate (30)
         +- * HashAggregate (29)
            +- * Project (28)
               +- * BroadcastHashJoin Inner BuildRight (27)
                  :- * Project (25)
                  :  +- * BroadcastHashJoin Inner BuildRight (24)
                  :     :- * Project (22)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (21)
                  :     :     :- * SortMergeJoin LeftAnti (19)
                  :     :     :  :- * Project (13)
                  :     :     :  :  +- * SortMergeJoin LeftSemi (12)
                  :     :     :  :     :- * Sort (6)
                  :     :     :  :     :  +- Exchange (5)
                  :     :     :  :     :     +- * Project (4)
                  :     :     :  :     :        +- * Filter (3)
                  :     :     :  :     :           +- * ColumnarToRow (2)
                  :     :     :  :     :              +- Scan parquet spark_catalog.default.web_sales (1)
                  :     :     :  :     +- * Sort (11)
                  :     :     :  :        +- Exchange (10)
                  :     :     :  :           +- * Project (9)
                  :     :     :  :              +- * ColumnarToRow (8)
                  :     :     :  :                 +- Scan parquet spark_catalog.default.web_sales (7)
                  :     :     :  +- * Sort (18)
                  :     :     :     +- Exchange (17)
                  :     :     :        +- * Project (16)
                  :     :     :           +- * ColumnarToRow (15)
                  :     :     :              +- Scan parquet spark_catalog.default.web_returns (14)
                  :     :     +- ReusedExchange (20)
                  :     +- ReusedExchange (23)
                  +- ReusedExchange (26)


(1) Scan parquet spark_catalog.default.web_sales
Output [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
PushedFilters: [IsNotNull(ws_ship_date_sk), IsNotNull(ws_ship_addr_sk), IsNotNull(ws_web_site_sk)]
ReadSchema: struct<ws_ship_date_sk:int,ws_ship_addr_sk:int,ws_web_site_sk:int,ws_warehouse_sk:int,ws_order_number:int,ws_ext_ship_cost:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 1]
Input [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]

(3) Filter [codegen id : 1]
Input [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]
Condition : (((((isnotnull(ws_ship_date_sk#1) AND isnotnull(ws_ship_addr_sk#2)) AND isnotnull(ws_web_site_sk#3)) AND dynamicpruningexpression(ws_ship_addr_sk#2 IN dynamicpruning#9)) AND dynamicpruningexpression(ws_web_site_sk#3 IN dynamicpruning#10)) AND dynamicpruningexpression(ws_ship_date_sk#1 IN dynamicpruning#11))

(4) Project [codegen id : 1]
Output [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [8]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ws_sold_date_sk#8]

(5) Exchange
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Arguments: hashpartitioning(ws_order_number#5, 5), ENSURE_REQUIREMENTS, [plan_id=1]

(6) Sort [codegen id : 2]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Arguments: [ws_order_number#5 ASC NULLS FIRST], false, 0

(7) Scan parquet spark_catalog.default.web_sales
Output [3]: [ws_warehouse_sk#12, ws_order_number#13, ws_sold_date_sk#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_sales]
ReadSchema: struct<ws_warehouse_sk:int,ws_order_number:int>

(8) ColumnarToRow [codegen id : 3]
Input [3]: [ws_warehouse_sk#12, ws_order_number#13, ws_sold_date_sk#14]

(9) Project [codegen id : 3]
Output [2]: [ws_warehouse_sk#12, ws_order_number#13]
Input [3]: [ws_warehouse_sk#12, ws_order_number#13, ws_sold_date_sk#14]

(10) Exchange
Input [2]: [ws_warehouse_sk#12, ws_order_number#13]
Arguments: hashpartitioning(ws_order_number#13, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 4]
Input [2]: [ws_warehouse_sk#12, ws_order_number#13]
Arguments: [ws_order_number#13 ASC NULLS FIRST], false, 0

(12) SortMergeJoin [codegen id : 5]
Left keys [1]: [ws_order_number#5]
Right keys [1]: [ws_order_number#13]
Join type: LeftSemi
Join condition: NOT (ws_warehouse_sk#4 = ws_warehouse_sk#12)

(13) Project [codegen id : 5]
Output [6]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_warehouse_sk#4, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]

(14) Scan parquet spark_catalog.default.web_returns
Output [2]: [wr_order_number#15, wr_returned_date_sk#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
ReadSchema: struct<wr_order_number:int>

(15) ColumnarToRow [codegen id : 6]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]

(16) Project [codegen id : 6]
Output [1]: [wr_order_number#15]
Input [2]: [wr_order_number#15, wr_returned_date_sk#16]

(17) Exchange
Input [1]: [wr_order_number#15]
Arguments: hashpartitioning(wr_order_number#15, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(18) Sort [codegen id : 7]
Input [1]: [wr_order_number#15]
Arguments: [wr_order_number#15 ASC NULLS FIRST], false, 0

(19) SortMergeJoin [codegen id : 11]
Left keys [1]: [ws_order_number#5]
Right keys [1]: [wr_order_number#15]
Join type: LeftAnti
Join condition: None

(20) ReusedExchange [Reuses operator id: 38]
Output [1]: [ca_address_sk#17]

(21) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_ship_addr_sk#2]
Right keys [1]: [ca_address_sk#17]
Join type: Inner
Join condition: None

(22) Project [codegen id : 11]
Output [5]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [7]: [ws_ship_date_sk#1, ws_ship_addr_sk#2, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, ca_address_sk#17]

(23) ReusedExchange [Reuses operator id: 43]
Output [1]: [web_site_sk#18]

(24) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_web_site_sk#3]
Right keys [1]: [web_site_sk#18]
Join type: Inner
Join condition: None

(25) Project [codegen id : 11]
Output [4]: [ws_ship_date_sk#1, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [6]: [ws_ship_date_sk#1, ws_web_site_sk#3, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, web_site_sk#18]

(26) ReusedExchange [Reuses operator id: 48]
Output [1]: [d_date_sk#19]

(27) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ws_ship_date_sk#1]
Right keys [1]: [d_date_sk#19]
Join type: Inner
Join condition: None

(28) Project [codegen id : 11]
Output [3]: [ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Input [5]: [ws_ship_date_sk#1, ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7, d_date_sk#19]

(29) HashAggregate [codegen id : 11]
Input [3]: [ws_order_number#5, ws_ext_ship_cost#6, ws_net_profit#7]
Keys [1]: [ws_order_number#5]
Functions [2]: [partial_sum(UnscaledValue(ws_ext_ship_cost#6)), partial_sum(UnscaledValue(ws_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#6))#20, sum(UnscaledValue(ws_net_profit#7))#21]
Results [3]: [ws_order_number#5, sum#22, sum#23]

(30) HashAggregate [codegen id : 11]
Input [3]: [ws_order_number#5, sum#22, sum#23]
Keys [1]: [ws_order_number#5]
Functions [2]: [merge_sum(UnscaledValue(ws_ext_ship_cost#6)), merge_sum(UnscaledValue(ws_net_profit#7))]
Aggregate Attributes [2]: [sum(UnscaledValue(ws_ext_ship_cost#6))#20, sum(UnscaledValue(ws_net_profit#7))#21]
Results [3]: [ws_order_number#5, sum#22, sum#23]

(31) HashAggregate [codegen id : 11]
Input [3]: [ws_order_number#5, sum#22, sum#23]
Keys: []
Functions [3]: [merge_sum(UnscaledValue(ws_ext_ship_cost#6)), merge_sum(UnscaledValue(ws_net_profit#7)), partial_count(distinct ws_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#6))#20, sum(UnscaledValue(ws_net_profit#7))#21, count(ws_order_number#5)#24]
Results [3]: [sum#22, sum#23, count#25]

(32) Exchange
Input [3]: [sum#22, sum#23, count#25]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=4]

(33) HashAggregate [codegen id : 12]
Input [3]: [sum#22, sum#23, count#25]
Keys: []
Functions [3]: [sum(UnscaledValue(ws_ext_ship_cost#6)), sum(UnscaledValue(ws_net_profit#7)), count(distinct ws_order_number#5)]
Aggregate Attributes [3]: [sum(UnscaledValue(ws_ext_ship_cost#6))#20, sum(UnscaledValue(ws_net_profit#7))#21, count(ws_order_number#5)#24]
Results [3]: [count(ws_order_number#5)#24 AS order count #26, MakeDecimal(sum(UnscaledValue(ws_ext_ship_cost#6))#20,17,2) AS total shipping cost #27, MakeDecimal(sum(UnscaledValue(ws_net_profit#7))#21,17,2) AS total net profit #28]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = ws_ship_addr_sk#2 IN dynamicpruning#9
BroadcastExchange (38)
+- * Project (37)
   +- * Filter (36)
      +- * ColumnarToRow (35)
         +- Scan parquet spark_catalog.default.customer_address (34)


(34) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#17, ca_state#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_state), EqualTo(ca_state,IL), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(35) ColumnarToRow [codegen id : 1]
Input [2]: [ca_address_sk#17, ca_state#29]

(36) Filter [codegen id : 1]
Input [2]: [ca_address_sk#17, ca_state#29]
Condition : ((isnotnull(ca_state#29) AND (ca_state#29 = IL)) AND isnotnull(ca_address_sk#17))

(37) Project [codegen id : 1]
Output [1]: [ca_address_sk#17]
Input [2]: [ca_address_sk#17, ca_state#29]

(38) BroadcastExchange
Input [1]: [ca_address_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

Subquery:2 Hosting operator id = 3 Hosting Expression = ws_web_site_sk#3 IN dynamicpruning#10
BroadcastExchange (43)
+- * Project (42)
   +- * Filter (41)
      +- * ColumnarToRow (40)
         +- Scan parquet spark_catalog.default.web_site (39)


(39) Scan parquet spark_catalog.default.web_site
Output [2]: [web_site_sk#18, web_company_name#30]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_site]
PushedFilters: [IsNotNull(web_company_name), EqualTo(web_company_name,pri                                               ), IsNotNull(web_site_sk)]
ReadSchema: struct<web_site_sk:int,web_company_name:string>

(40) ColumnarToRow [codegen id : 1]
Input [2]: [web_site_sk#18, web_company_name#30]

(41) Filter [codegen id : 1]
Input [2]: [web_site_sk#18, web_company_name#30]
Condition : ((isnotnull(web_company_name#30) AND (web_company_name#30 = pri                                               )) AND isnotnull(web_site_sk#18))

(42) Project [codegen id : 1]
Output [1]: [web_site_sk#18]
Input [2]: [web_site_sk#18, web_company_name#30]

(43) BroadcastExchange
Input [1]: [web_site_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=6]

Subquery:3 Hosting operator id = 3 Hosting Expression = ws_ship_date_sk#1 IN dynamicpruning#11
BroadcastExchange (48)
+- * Project (47)
   +- * Filter (46)
      +- * ColumnarToRow (45)
         +- Scan parquet spark_catalog.default.date_dim (44)


(44) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#19, d_date#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_date), GreaterThanOrEqual(d_date,1999-02-01), LessThanOrEqual(d_date,1999-04-02), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_date:date>

(45) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#19, d_date#31]

(46) Filter [codegen id : 1]
Input [2]: [d_date_sk#19, d_date#31]
Condition : (((isnotnull(d_date#31) AND (d_date#31 >= 1999-02-01)) AND (d_date#31 <= 1999-04-02)) AND isnotnull(d_date_sk#19))

(47) Project [codegen id : 1]
Output [1]: [d_date_sk#19]
Input [2]: [d_date_sk#19, d_date#31]

(48) BroadcastExchange
Input [1]: [d_date_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=7]


