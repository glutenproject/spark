== Physical Plan ==
TakeOrderedAndProject (47)
+- * HashAggregate (46)
   +- Exchange (45)
      +- * HashAggregate (44)
         +- * Project (43)
            +- * BroadcastHashJoin Inner BuildRight (42)
               :- * Project (37)
               :  +- * BroadcastHashJoin Inner BuildRight (36)
               :     :- * Project (34)
               :     :  +- * BroadcastHashJoin Inner BuildRight (33)
               :     :     :- * Project (31)
               :     :     :  +- * SortMergeJoin Inner (30)
               :     :     :     :- * Sort (24)
               :     :     :     :  +- Exchange (23)
               :     :     :     :     +- * Project (22)
               :     :     :     :        +- * BroadcastHashJoin Inner BuildRight (21)
               :     :     :     :           :- * Project (19)
               :     :     :     :           :  +- * SortMergeJoin Inner (18)
               :     :     :     :           :     :- * Sort (11)
               :     :     :     :           :     :  +- Exchange (10)
               :     :     :     :           :     :     +- * Project (9)
               :     :     :     :           :     :        +- * BroadcastHashJoin Inner BuildRight (8)
               :     :     :     :           :     :           :- * Filter (3)
               :     :     :     :           :     :           :  +- * ColumnarToRow (2)
               :     :     :     :           :     :           :     +- Scan parquet spark_catalog.default.web_sales (1)
               :     :     :     :           :     :           +- BroadcastExchange (7)
               :     :     :     :           :     :              +- * Filter (6)
               :     :     :     :           :     :                 +- * ColumnarToRow (5)
               :     :     :     :           :     :                    +- Scan parquet spark_catalog.default.web_page (4)
               :     :     :     :           :     +- * Sort (17)
               :     :     :     :           :        +- Exchange (16)
               :     :     :     :           :           +- * Project (15)
               :     :     :     :           :              +- * Filter (14)
               :     :     :     :           :                 +- * ColumnarToRow (13)
               :     :     :     :           :                    +- Scan parquet spark_catalog.default.web_returns (12)
               :     :     :     :           +- ReusedExchange (20)
               :     :     :     +- * Sort (29)
               :     :     :        +- Exchange (28)
               :     :     :           +- * Filter (27)
               :     :     :              +- * ColumnarToRow (26)
               :     :     :                 +- Scan parquet spark_catalog.default.customer_demographics (25)
               :     :     +- ReusedExchange (32)
               :     +- ReusedExchange (35)
               +- BroadcastExchange (41)
                  +- * Filter (40)
                     +- * ColumnarToRow (39)
                        +- Scan parquet spark_catalog.default.reason (38)


(1) Scan parquet spark_catalog.default.web_sales
Output [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ws_sold_date_sk#7), dynamicpruningexpression(ws_sold_date_sk#7 IN dynamicpruning#8)]
PushedFilters: [IsNotNull(ws_item_sk), IsNotNull(ws_order_number), IsNotNull(ws_web_page_sk), Or(Or(And(GreaterThanOrEqual(ws_sales_price,100.00),LessThanOrEqual(ws_sales_price,150.00)),And(GreaterThanOrEqual(ws_sales_price,50.00),LessThanOrEqual(ws_sales_price,100.00))),And(GreaterThanOrEqual(ws_sales_price,150.00),LessThanOrEqual(ws_sales_price,200.00))), Or(Or(And(GreaterThanOrEqual(ws_net_profit,100.00),LessThanOrEqual(ws_net_profit,200.00)),And(GreaterThanOrEqual(ws_net_profit,150.00),LessThanOrEqual(ws_net_profit,300.00))),And(GreaterThanOrEqual(ws_net_profit,50.00),LessThanOrEqual(ws_net_profit,250.00)))]
ReadSchema: struct<ws_item_sk:int,ws_web_page_sk:int,ws_order_number:int,ws_quantity:int,ws_sales_price:decimal(7,2),ws_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]

(3) Filter [codegen id : 2]
Input [7]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Condition : ((((isnotnull(ws_item_sk#1) AND isnotnull(ws_order_number#3)) AND isnotnull(ws_web_page_sk#2)) AND ((((ws_sales_price#5 >= 100.00) AND (ws_sales_price#5 <= 150.00)) OR ((ws_sales_price#5 >= 50.00) AND (ws_sales_price#5 <= 100.00))) OR ((ws_sales_price#5 >= 150.00) AND (ws_sales_price#5 <= 200.00)))) AND ((((ws_net_profit#6 >= 100.00) AND (ws_net_profit#6 <= 200.00)) OR ((ws_net_profit#6 >= 150.00) AND (ws_net_profit#6 <= 300.00))) OR ((ws_net_profit#6 >= 50.00) AND (ws_net_profit#6 <= 250.00))))

(4) Scan parquet spark_catalog.default.web_page
Output [1]: [wp_web_page_sk#9]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_page]
PushedFilters: [IsNotNull(wp_web_page_sk)]
ReadSchema: struct<wp_web_page_sk:int>

(5) ColumnarToRow [codegen id : 1]
Input [1]: [wp_web_page_sk#9]

(6) Filter [codegen id : 1]
Input [1]: [wp_web_page_sk#9]
Condition : isnotnull(wp_web_page_sk#9)

(7) BroadcastExchange
Input [1]: [wp_web_page_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=1]

(8) BroadcastHashJoin [codegen id : 2]
Left keys [1]: [ws_web_page_sk#2]
Right keys [1]: [wp_web_page_sk#9]
Join type: Inner
Join condition: None

(9) Project [codegen id : 2]
Output [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Input [8]: [ws_item_sk#1, ws_web_page_sk#2, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wp_web_page_sk#9]

(10) Exchange
Input [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: hashpartitioning(ws_item_sk#1, ws_order_number#3, 5), ENSURE_REQUIREMENTS, [plan_id=2]

(11) Sort [codegen id : 3]
Input [6]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7]
Arguments: [ws_item_sk#1 ASC NULLS FIRST, ws_order_number#3 ASC NULLS FIRST], false, 0

(12) Scan parquet spark_catalog.default.web_returns
Output [9]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17, wr_returned_date_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/web_returns]
PushedFilters: [IsNotNull(wr_item_sk), IsNotNull(wr_order_number), IsNotNull(wr_refunded_cdemo_sk), IsNotNull(wr_returning_cdemo_sk), IsNotNull(wr_refunded_addr_sk), IsNotNull(wr_reason_sk)]
ReadSchema: struct<wr_item_sk:int,wr_refunded_cdemo_sk:int,wr_refunded_addr_sk:int,wr_returning_cdemo_sk:int,wr_reason_sk:int,wr_order_number:int,wr_fee:decimal(7,2),wr_refunded_cash:decimal(7,2)>

(13) ColumnarToRow [codegen id : 4]
Input [9]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17, wr_returned_date_sk#18]

(14) Filter [codegen id : 4]
Input [9]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17, wr_returned_date_sk#18]
Condition : (((((((isnotnull(wr_item_sk#10) AND isnotnull(wr_order_number#15)) AND isnotnull(wr_refunded_cdemo_sk#11)) AND isnotnull(wr_returning_cdemo_sk#13)) AND isnotnull(wr_refunded_addr_sk#12)) AND isnotnull(wr_reason_sk#14)) AND dynamicpruningexpression(wr_refunded_cdemo_sk#11 IN dynamicpruning#19)) AND dynamicpruningexpression(wr_refunded_addr_sk#12 IN dynamicpruning#20))

(15) Project [codegen id : 4]
Output [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Input [9]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17, wr_returned_date_sk#18]

(16) Exchange
Input [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Arguments: hashpartitioning(wr_item_sk#10, wr_order_number#15, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(17) Sort [codegen id : 5]
Input [8]: [wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]
Arguments: [wr_item_sk#10 ASC NULLS FIRST, wr_order_number#15 ASC NULLS FIRST], false, 0

(18) SortMergeJoin [codegen id : 7]
Left keys [2]: [ws_item_sk#1, ws_order_number#3]
Right keys [2]: [wr_item_sk#10, wr_order_number#15]
Join type: Inner
Join condition: None

(19) Project [codegen id : 7]
Output [10]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [14]: [ws_item_sk#1, ws_order_number#3, ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_item_sk#10, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_order_number#15, wr_fee#16, wr_refunded_cash#17]

(20) ReusedExchange [Reuses operator id: 56]
Output [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(21) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [wr_refunded_cdemo_sk#11]
Right keys [1]: [cd_demo_sk#21]
Join type: Inner
Join condition: ((((((cd_marital_status#22 = M) AND (cd_education_status#23 = Advanced Degree     )) AND (ws_sales_price#5 >= 100.00)) AND (ws_sales_price#5 <= 150.00)) OR ((((cd_marital_status#22 = S) AND (cd_education_status#23 = College             )) AND (ws_sales_price#5 >= 50.00)) AND (ws_sales_price#5 <= 100.00))) OR ((((cd_marital_status#22 = W) AND (cd_education_status#23 = 2 yr Degree         )) AND (ws_sales_price#5 >= 150.00)) AND (ws_sales_price#5 <= 200.00)))

(22) Project [codegen id : 7]
Output [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_marital_status#22, cd_education_status#23]
Input [13]: [ws_quantity#4, ws_sales_price#5, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_cdemo_sk#11, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(23) Exchange
Input [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_marital_status#22, cd_education_status#23]
Arguments: hashpartitioning(wr_returning_cdemo_sk#13, cd_marital_status#22, cd_education_status#23, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(24) Sort [codegen id : 8]
Input [10]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_marital_status#22, cd_education_status#23]
Arguments: [wr_returning_cdemo_sk#13 ASC NULLS FIRST, cd_marital_status#22 ASC NULLS FIRST, cd_education_status#23 ASC NULLS FIRST], false, 0

(25) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status)]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(26) ColumnarToRow [codegen id : 9]
Input [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]

(27) Filter [codegen id : 9]
Input [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Condition : ((isnotnull(cd_demo_sk#24) AND isnotnull(cd_marital_status#25)) AND isnotnull(cd_education_status#26))

(28) Exchange
Input [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Arguments: hashpartitioning(cd_demo_sk#24, cd_marital_status#25, cd_education_status#26, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(29) Sort [codegen id : 10]
Input [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Arguments: [cd_demo_sk#24 ASC NULLS FIRST, cd_marital_status#25 ASC NULLS FIRST, cd_education_status#26 ASC NULLS FIRST], false, 0

(30) SortMergeJoin [codegen id : 14]
Left keys [3]: [wr_returning_cdemo_sk#13, cd_marital_status#22, cd_education_status#23]
Right keys [3]: [cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]
Join type: Inner
Join condition: None

(31) Project [codegen id : 14]
Output [7]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [13]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_returning_cdemo_sk#13, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, cd_marital_status#22, cd_education_status#23, cd_demo_sk#24, cd_marital_status#25, cd_education_status#26]

(32) ReusedExchange [Reuses operator id: 61]
Output [2]: [ca_address_sk#27, ca_state#28]

(33) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [wr_refunded_addr_sk#12]
Right keys [1]: [ca_address_sk#27]
Join type: Inner
Join condition: ((((ca_state#28 IN (IN,OH,NJ) AND (ws_net_profit#6 >= 100.00)) AND (ws_net_profit#6 <= 200.00)) OR ((ca_state#28 IN (WI,CT,KY) AND (ws_net_profit#6 >= 150.00)) AND (ws_net_profit#6 <= 300.00))) OR ((ca_state#28 IN (LA,IA,AR) AND (ws_net_profit#6 >= 50.00)) AND (ws_net_profit#6 <= 250.00)))

(34) Project [codegen id : 14]
Output [5]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [9]: [ws_quantity#4, ws_net_profit#6, ws_sold_date_sk#7, wr_refunded_addr_sk#12, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, ca_address_sk#27, ca_state#28]

(35) ReusedExchange [Reuses operator id: 52]
Output [1]: [d_date_sk#29]

(36) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [ws_sold_date_sk#7]
Right keys [1]: [d_date_sk#29]
Join type: Inner
Join condition: None

(37) Project [codegen id : 14]
Output [4]: [ws_quantity#4, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17]
Input [6]: [ws_quantity#4, ws_sold_date_sk#7, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, d_date_sk#29]

(38) Scan parquet spark_catalog.default.reason
Output [2]: [r_reason_sk#30, r_reason_desc#31]
Batched: true
Location [not included in comparison]/{warehouse_dir}/reason]
PushedFilters: [IsNotNull(r_reason_sk)]
ReadSchema: struct<r_reason_sk:int,r_reason_desc:string>

(39) ColumnarToRow [codegen id : 13]
Input [2]: [r_reason_sk#30, r_reason_desc#31]

(40) Filter [codegen id : 13]
Input [2]: [r_reason_sk#30, r_reason_desc#31]
Condition : isnotnull(r_reason_sk#30)

(41) BroadcastExchange
Input [2]: [r_reason_sk#30, r_reason_desc#31]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=6]

(42) BroadcastHashJoin [codegen id : 14]
Left keys [1]: [wr_reason_sk#14]
Right keys [1]: [r_reason_sk#30]
Join type: Inner
Join condition: None

(43) Project [codegen id : 14]
Output [4]: [ws_quantity#4, wr_fee#16, wr_refunded_cash#17, r_reason_desc#31]
Input [6]: [ws_quantity#4, wr_reason_sk#14, wr_fee#16, wr_refunded_cash#17, r_reason_sk#30, r_reason_desc#31]

(44) HashAggregate [codegen id : 14]
Input [4]: [ws_quantity#4, wr_fee#16, wr_refunded_cash#17, r_reason_desc#31]
Keys [1]: [r_reason_desc#31]
Functions [3]: [partial_avg(ws_quantity#4), partial_avg(UnscaledValue(wr_refunded_cash#17)), partial_avg(UnscaledValue(wr_fee#16))]
Aggregate Attributes [6]: [sum#32, count#33, sum#34, count#35, sum#36, count#37]
Results [7]: [r_reason_desc#31, sum#38, count#39, sum#40, count#41, sum#42, count#43]

(45) Exchange
Input [7]: [r_reason_desc#31, sum#38, count#39, sum#40, count#41, sum#42, count#43]
Arguments: hashpartitioning(r_reason_desc#31, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(46) HashAggregate [codegen id : 15]
Input [7]: [r_reason_desc#31, sum#38, count#39, sum#40, count#41, sum#42, count#43]
Keys [1]: [r_reason_desc#31]
Functions [3]: [avg(ws_quantity#4), avg(UnscaledValue(wr_refunded_cash#17)), avg(UnscaledValue(wr_fee#16))]
Aggregate Attributes [3]: [avg(ws_quantity#4)#44, avg(UnscaledValue(wr_refunded_cash#17))#45, avg(UnscaledValue(wr_fee#16))#46]
Results [4]: [substr(r_reason_desc#31, 1, 20) AS substr(r_reason_desc, 1, 20)#47, avg(ws_quantity#4)#44 AS avg(ws_quantity)#48, cast((avg(UnscaledValue(wr_refunded_cash#17))#45 / 100.0) as decimal(11,6)) AS avg(wr_refunded_cash)#49, cast((avg(UnscaledValue(wr_fee#16))#46 / 100.0) as decimal(11,6)) AS avg(wr_fee)#50]

(47) TakeOrderedAndProject
Input [4]: [substr(r_reason_desc, 1, 20)#47, avg(ws_quantity)#48, avg(wr_refunded_cash)#49, avg(wr_fee)#50]
Arguments: 100, [substr(r_reason_desc, 1, 20)#47 ASC NULLS FIRST, avg(ws_quantity)#48 ASC NULLS FIRST, avg(wr_refunded_cash)#49 ASC NULLS FIRST, avg(wr_fee)#50 ASC NULLS FIRST], [substr(r_reason_desc, 1, 20)#47, avg(ws_quantity)#48, avg(wr_refunded_cash)#49, avg(wr_fee)#50]

===== Subqueries =====

Subquery:1 Hosting operator id = 1 Hosting Expression = ws_sold_date_sk#7 IN dynamicpruning#8
BroadcastExchange (52)
+- * Project (51)
   +- * Filter (50)
      +- * ColumnarToRow (49)
         +- Scan parquet spark_catalog.default.date_dim (48)


(48) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#29, d_year#51]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2000), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(49) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#29, d_year#51]

(50) Filter [codegen id : 1]
Input [2]: [d_date_sk#29, d_year#51]
Condition : ((isnotnull(d_year#51) AND (d_year#51 = 2000)) AND isnotnull(d_date_sk#29))

(51) Project [codegen id : 1]
Output [1]: [d_date_sk#29]
Input [2]: [d_date_sk#29, d_year#51]

(52) BroadcastExchange
Input [1]: [d_date_sk#29]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=8]

Subquery:2 Hosting operator id = 14 Hosting Expression = wr_refunded_cdemo_sk#11 IN dynamicpruning#19
BroadcastExchange (56)
+- * Filter (55)
   +- * ColumnarToRow (54)
      +- Scan parquet spark_catalog.default.customer_demographics (53)


(53) Scan parquet spark_catalog.default.customer_demographics
Output [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), Or(Or(And(EqualTo(cd_marital_status,M),EqualTo(cd_education_status,Advanced Degree     )),And(EqualTo(cd_marital_status,S),EqualTo(cd_education_status,College             ))),And(EqualTo(cd_marital_status,W),EqualTo(cd_education_status,2 yr Degree         )))]
ReadSchema: struct<cd_demo_sk:int,cd_marital_status:string,cd_education_status:string>

(54) ColumnarToRow [codegen id : 1]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]

(55) Filter [codegen id : 1]
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Condition : (((isnotnull(cd_demo_sk#21) AND isnotnull(cd_marital_status#22)) AND isnotnull(cd_education_status#23)) AND ((((cd_marital_status#22 = M) AND (cd_education_status#23 = Advanced Degree     )) OR ((cd_marital_status#22 = S) AND (cd_education_status#23 = College             ))) OR ((cd_marital_status#22 = W) AND (cd_education_status#23 = 2 yr Degree         ))))

(56) BroadcastExchange
Input [3]: [cd_demo_sk#21, cd_marital_status#22, cd_education_status#23]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

Subquery:3 Hosting operator id = 14 Hosting Expression = wr_refunded_addr_sk#12 IN dynamicpruning#20
BroadcastExchange (61)
+- * Project (60)
   +- * Filter (59)
      +- * ColumnarToRow (58)
         +- Scan parquet spark_catalog.default.customer_address (57)


(57) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#27, ca_state#28, ca_country#52]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [IsNotNull(ca_country), EqualTo(ca_country,United States), IsNotNull(ca_address_sk), Or(Or(In(ca_state, [IN,NJ,OH]),In(ca_state, [CT,KY,WI])),In(ca_state, [AR,IA,LA]))]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(58) ColumnarToRow [codegen id : 1]
Input [3]: [ca_address_sk#27, ca_state#28, ca_country#52]

(59) Filter [codegen id : 1]
Input [3]: [ca_address_sk#27, ca_state#28, ca_country#52]
Condition : (((isnotnull(ca_country#52) AND (ca_country#52 = United States)) AND isnotnull(ca_address_sk#27)) AND ((ca_state#28 IN (IN,OH,NJ) OR ca_state#28 IN (WI,CT,KY)) OR ca_state#28 IN (LA,IA,AR)))

(60) Project [codegen id : 1]
Output [2]: [ca_address_sk#27, ca_state#28]
Input [3]: [ca_address_sk#27, ca_state#28, ca_country#52]

(61) BroadcastExchange
Input [2]: [ca_address_sk#27, ca_state#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=10]


