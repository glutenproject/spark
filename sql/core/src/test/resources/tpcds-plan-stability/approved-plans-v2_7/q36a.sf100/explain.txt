== Physical Plan ==
TakeOrderedAndProject (41)
+- * Project (40)
   +- Window (39)
      +- * Sort (38)
         +- Exchange (37)
            +- * HashAggregate (36)
               +- Exchange (35)
                  +- * HashAggregate (34)
                     +- Union (33)
                        :- * HashAggregate (22)
                        :  +- Exchange (21)
                        :     +- * HashAggregate (20)
                        :        +- * Project (19)
                        :           +- * BroadcastHashJoin Inner BuildRight (18)
                        :              :- * Project (13)
                        :              :  +- * BroadcastHashJoin Inner BuildRight (12)
                        :              :     :- * Project (6)
                        :              :     :  +- * BroadcastHashJoin Inner BuildRight (5)
                        :              :     :     :- * Filter (3)
                        :              :     :     :  +- * ColumnarToRow (2)
                        :              :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
                        :              :     :     +- ReusedExchange (4)
                        :              :     +- BroadcastExchange (11)
                        :              :        +- * Project (10)
                        :              :           +- * Filter (9)
                        :              :              +- * ColumnarToRow (8)
                        :              :                 +- Scan parquet spark_catalog.default.store (7)
                        :              +- BroadcastExchange (17)
                        :                 +- * Filter (16)
                        :                    +- * ColumnarToRow (15)
                        :                       +- Scan parquet spark_catalog.default.item (14)
                        :- * HashAggregate (27)
                        :  +- Exchange (26)
                        :     +- * HashAggregate (25)
                        :        +- * HashAggregate (24)
                        :           +- ReusedExchange (23)
                        +- * HashAggregate (32)
                           +- Exchange (31)
                              +- * HashAggregate (30)
                                 +- * HashAggregate (29)
                                    +- ReusedExchange (28)


(1) Scan parquet spark_catalog.default.store_sales
Output [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#5), dynamicpruningexpression(ss_sold_date_sk#5 IN dynamicpruning#6)]
PushedFilters: [IsNotNull(ss_item_sk), IsNotNull(ss_store_sk)]
ReadSchema: struct<ss_item_sk:int,ss_store_sk:int,ss_ext_sales_price:decimal(7,2),ss_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]

(3) Filter [codegen id : 4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5]
Condition : ((isnotnull(ss_item_sk#1) AND isnotnull(ss_store_sk#2)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#7, [id=#8]), xxhash64(ss_store_sk#2, 42)))

(4) ReusedExchange [Reuses operator id: 53]
Output [1]: [d_date_sk#9]

(5) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_sold_date_sk#5]
Right keys [1]: [d_date_sk#9]
Join type: Inner
Join condition: None

(6) Project [codegen id : 4]
Output [4]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4]
Input [6]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, ss_sold_date_sk#5, d_date_sk#9]

(7) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(8) ColumnarToRow [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]

(9) Filter [codegen id : 2]
Input [2]: [s_store_sk#10, s_state#11]
Condition : ((isnotnull(s_state#11) AND (s_state#11 = TN)) AND isnotnull(s_store_sk#10))

(10) Project [codegen id : 2]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_state#11]

(11) BroadcastExchange
Input [1]: [s_store_sk#10]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_store_sk#2]
Right keys [1]: [s_store_sk#10]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [3]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4]
Input [5]: [ss_item_sk#1, ss_store_sk#2, ss_ext_sales_price#3, ss_net_profit#4, s_store_sk#10]

(14) Scan parquet spark_catalog.default.item
Output [3]: [i_item_sk#12, i_class#13, i_category#14]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_class:string,i_category:string>

(15) ColumnarToRow [codegen id : 3]
Input [3]: [i_item_sk#12, i_class#13, i_category#14]

(16) Filter [codegen id : 3]
Input [3]: [i_item_sk#12, i_class#13, i_category#14]
Condition : isnotnull(i_item_sk#12)

(17) BroadcastExchange
Input [3]: [i_item_sk#12, i_class#13, i_category#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#12]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#13, i_category#14]
Input [6]: [ss_item_sk#1, ss_ext_sales_price#3, ss_net_profit#4, i_item_sk#12, i_class#13, i_category#14]

(20) HashAggregate [codegen id : 4]
Input [4]: [ss_ext_sales_price#3, ss_net_profit#4, i_class#13, i_category#14]
Keys [2]: [i_category#14, i_class#13]
Functions [2]: [partial_sum(UnscaledValue(ss_net_profit#4)), partial_sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum#15, sum#16]
Results [4]: [i_category#14, i_class#13, sum#17, sum#18]

(21) Exchange
Input [4]: [i_category#14, i_class#13, sum#17, sum#18]
Arguments: hashpartitioning(i_category#14, i_class#13, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(22) HashAggregate [codegen id : 5]
Input [4]: [i_category#14, i_class#13, sum#17, sum#18]
Keys [2]: [i_category#14, i_class#13]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#19, sum(UnscaledValue(ss_ext_sales_price#3))#20]
Results [6]: [cast((MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#19,17,2) / MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#20,17,2)) as decimal(38,20)) AS gross_margin#21, i_category#14, i_class#13, 0 AS t_category#22, 0 AS t_class#23, 0 AS lochierarchy#24]

(23) ReusedExchange [Reuses operator id: 21]
Output [4]: [i_category#14, i_class#13, sum#25, sum#26]

(24) HashAggregate [codegen id : 10]
Input [4]: [i_category#14, i_class#13, sum#25, sum#26]
Keys [2]: [i_category#14, i_class#13]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#27, sum(UnscaledValue(ss_ext_sales_price#3))#28]
Results [3]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#27,17,2) AS ss_net_profit#29, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#28,17,2) AS ss_ext_sales_price#30, i_category#14]

(25) HashAggregate [codegen id : 10]
Input [3]: [ss_net_profit#29, ss_ext_sales_price#30, i_category#14]
Keys [1]: [i_category#14]
Functions [2]: [partial_sum(ss_net_profit#29), partial_sum(ss_ext_sales_price#30)]
Aggregate Attributes [4]: [sum#31, isEmpty#32, sum#33, isEmpty#34]
Results [5]: [i_category#14, sum#35, isEmpty#36, sum#37, isEmpty#38]

(26) Exchange
Input [5]: [i_category#14, sum#35, isEmpty#36, sum#37, isEmpty#38]
Arguments: hashpartitioning(i_category#14, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(27) HashAggregate [codegen id : 11]
Input [5]: [i_category#14, sum#35, isEmpty#36, sum#37, isEmpty#38]
Keys [1]: [i_category#14]
Functions [2]: [sum(ss_net_profit#29), sum(ss_ext_sales_price#30)]
Aggregate Attributes [2]: [sum(ss_net_profit#29)#39, sum(ss_ext_sales_price#30)#40]
Results [6]: [cast((sum(ss_net_profit#29)#39 / sum(ss_ext_sales_price#30)#40) as decimal(38,20)) AS gross_margin#41, i_category#14, null AS i_class#42, 0 AS t_category#43, 1 AS t_class#44, 1 AS lochierarchy#45]

(28) ReusedExchange [Reuses operator id: 21]
Output [4]: [i_category#14, i_class#13, sum#46, sum#47]

(29) HashAggregate [codegen id : 16]
Input [4]: [i_category#14, i_class#13, sum#46, sum#47]
Keys [2]: [i_category#14, i_class#13]
Functions [2]: [sum(UnscaledValue(ss_net_profit#4)), sum(UnscaledValue(ss_ext_sales_price#3))]
Aggregate Attributes [2]: [sum(UnscaledValue(ss_net_profit#4))#27, sum(UnscaledValue(ss_ext_sales_price#3))#28]
Results [2]: [MakeDecimal(sum(UnscaledValue(ss_net_profit#4))#27,17,2) AS ss_net_profit#29, MakeDecimal(sum(UnscaledValue(ss_ext_sales_price#3))#28,17,2) AS ss_ext_sales_price#30]

(30) HashAggregate [codegen id : 16]
Input [2]: [ss_net_profit#29, ss_ext_sales_price#30]
Keys: []
Functions [2]: [partial_sum(ss_net_profit#29), partial_sum(ss_ext_sales_price#30)]
Aggregate Attributes [4]: [sum#48, isEmpty#49, sum#50, isEmpty#51]
Results [4]: [sum#52, isEmpty#53, sum#54, isEmpty#55]

(31) Exchange
Input [4]: [sum#52, isEmpty#53, sum#54, isEmpty#55]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=5]

(32) HashAggregate [codegen id : 17]
Input [4]: [sum#52, isEmpty#53, sum#54, isEmpty#55]
Keys: []
Functions [2]: [sum(ss_net_profit#29), sum(ss_ext_sales_price#30)]
Aggregate Attributes [2]: [sum(ss_net_profit#29)#56, sum(ss_ext_sales_price#30)#57]
Results [6]: [cast((sum(ss_net_profit#29)#56 / sum(ss_ext_sales_price#30)#57) as decimal(38,20)) AS gross_margin#58, null AS i_category#59, null AS i_class#60, 1 AS t_category#61, 1 AS t_class#62, 2 AS lochierarchy#63]

(33) Union

(34) HashAggregate [codegen id : 18]
Input [6]: [gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24]
Keys [6]: [gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [6]: [gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24]

(35) Exchange
Input [6]: [gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24]
Arguments: hashpartitioning(gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(36) HashAggregate [codegen id : 19]
Input [6]: [gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24]
Keys [6]: [gross_margin#21, i_category#14, i_class#13, t_category#22, t_class#23, lochierarchy#24]
Functions: []
Aggregate Attributes: []
Results [5]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, CASE WHEN (t_class#23 = 0) THEN i_category#14 END AS _w0#64]

(37) Exchange
Input [5]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, _w0#64]
Arguments: hashpartitioning(lochierarchy#24, _w0#64, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(38) Sort [codegen id : 20]
Input [5]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, _w0#64]
Arguments: [lochierarchy#24 ASC NULLS FIRST, _w0#64 ASC NULLS FIRST, gross_margin#21 ASC NULLS FIRST], false, 0

(39) Window
Input [5]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, _w0#64]
Arguments: [rank(gross_margin#21) windowspecdefinition(lochierarchy#24, _w0#64, gross_margin#21 ASC NULLS FIRST, specifiedwindowframe(RowFrame, unboundedpreceding$(), currentrow$())) AS rank_within_parent#65], [lochierarchy#24, _w0#64], [gross_margin#21 ASC NULLS FIRST]

(40) Project [codegen id : 21]
Output [5]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, rank_within_parent#65]
Input [6]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, _w0#64, rank_within_parent#65]

(41) TakeOrderedAndProject
Input [5]: [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, rank_within_parent#65]
Arguments: 100, [lochierarchy#24 DESC NULLS LAST, CASE WHEN (lochierarchy#24 = 0) THEN i_category#14 END ASC NULLS FIRST, rank_within_parent#65 ASC NULLS FIRST], [gross_margin#21, i_category#14, i_class#13, lochierarchy#24, rank_within_parent#65]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#7, [id=#8]
ObjectHashAggregate (48)
+- Exchange (47)
   +- ObjectHashAggregate (46)
      +- * Project (45)
         +- * Filter (44)
            +- * ColumnarToRow (43)
               +- Scan parquet spark_catalog.default.store (42)


(42) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#10, s_state#11]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(43) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#10, s_state#11]

(44) Filter [codegen id : 1]
Input [2]: [s_store_sk#10, s_state#11]
Condition : ((isnotnull(s_state#11) AND (s_state#11 = TN)) AND isnotnull(s_store_sk#10))

(45) Project [codegen id : 1]
Output [1]: [s_store_sk#10]
Input [2]: [s_store_sk#10, s_state#11]

(46) ObjectHashAggregate
Input [1]: [s_store_sk#10]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [buf#66]
Results [1]: [buf#67]

(47) Exchange
Input [1]: [buf#67]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(48) ObjectHashAggregate
Input [1]: [buf#67]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)#68]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#10, 42), 45, 360, 0, 0)#68 AS bloomFilter#69]

Subquery:2 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#5 IN dynamicpruning#6
BroadcastExchange (53)
+- * Project (52)
   +- * Filter (51)
      +- * ColumnarToRow (50)
         +- Scan parquet spark_catalog.default.date_dim (49)


(49) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#9, d_year#70]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(50) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#70]

(51) Filter [codegen id : 1]
Input [2]: [d_date_sk#9, d_year#70]
Condition : ((isnotnull(d_year#70) AND (d_year#70 = 2001)) AND isnotnull(d_date_sk#9))

(52) Project [codegen id : 1]
Output [1]: [d_date_sk#9]
Input [2]: [d_date_sk#9, d_year#70]

(53) BroadcastExchange
Input [1]: [d_date_sk#9]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=9]


