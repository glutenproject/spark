== Physical Plan ==
TakeOrderedAndProject (156)
+- Union (155)
   :- * HashAggregate (47)
   :  +- Exchange (46)
   :     +- * HashAggregate (45)
   :        +- * Project (44)
   :           +- * SortMergeJoin Inner (43)
   :              :- * Sort (21)
   :              :  +- Exchange (20)
   :              :     +- * Project (19)
   :              :        +- * BroadcastHashJoin Inner BuildRight (18)
   :              :           :- * Project (13)
   :              :           :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :           :     :- * Project (10)
   :              :           :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :           :     :     :- * Filter (3)
   :              :           :     :     :  +- * ColumnarToRow (2)
   :              :           :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (1)
   :              :           :     :     +- BroadcastExchange (8)
   :              :           :     :        +- * Project (7)
   :              :           :     :           +- * Filter (6)
   :              :           :     :              +- * ColumnarToRow (5)
   :              :           :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
   :              :           :     +- ReusedExchange (11)
   :              :           +- BroadcastExchange (17)
   :              :              +- * Filter (16)
   :              :                 +- * ColumnarToRow (15)
   :              :                    +- Scan parquet spark_catalog.default.item (14)
   :              +- * Sort (42)
   :                 +- Exchange (41)
   :                    +- * Project (40)
   :                       +- * SortMergeJoin Inner (39)
   :                          :- * Sort (33)
   :                          :  +- Exchange (32)
   :                          :     +- * Project (31)
   :                          :        +- * BroadcastHashJoin Inner BuildRight (30)
   :                          :           :- * Project (25)
   :                          :           :  +- * Filter (24)
   :                          :           :     +- * ColumnarToRow (23)
   :                          :           :        +- Scan parquet spark_catalog.default.customer (22)
   :                          :           +- BroadcastExchange (29)
   :                          :              +- * Filter (28)
   :                          :                 +- * ColumnarToRow (27)
   :                          :                    +- Scan parquet spark_catalog.default.customer_address (26)
   :                          +- * Sort (38)
   :                             +- Exchange (37)
   :                                +- * Filter (36)
   :                                   +- * ColumnarToRow (35)
   :                                      +- Scan parquet spark_catalog.default.customer_demographics (34)
   :- * HashAggregate (72)
   :  +- Exchange (71)
   :     +- * HashAggregate (70)
   :        +- * Project (69)
   :           +- * SortMergeJoin Inner (68)
   :              :- * Sort (49)
   :              :  +- ReusedExchange (48)
   :              +- * Sort (67)
   :                 +- Exchange (66)
   :                    +- * Project (65)
   :                       +- * SortMergeJoin Inner (64)
   :                          :- * Sort (61)
   :                          :  +- Exchange (60)
   :                          :     +- * Project (59)
   :                          :        +- * BroadcastHashJoin Inner BuildRight (58)
   :                          :           :- * Project (53)
   :                          :           :  +- * Filter (52)
   :                          :           :     +- * ColumnarToRow (51)
   :                          :           :        +- Scan parquet spark_catalog.default.customer (50)
   :                          :           +- BroadcastExchange (57)
   :                          :              +- * Filter (56)
   :                          :                 +- * ColumnarToRow (55)
   :                          :                    +- Scan parquet spark_catalog.default.customer_address (54)
   :                          +- * Sort (63)
   :                             +- ReusedExchange (62)
   :- * HashAggregate (98)
   :  +- Exchange (97)
   :     +- * HashAggregate (96)
   :        +- * Project (95)
   :           +- * SortMergeJoin Inner (94)
   :              :- * Sort (74)
   :              :  +- ReusedExchange (73)
   :              +- * Sort (93)
   :                 +- Exchange (92)
   :                    +- * Project (91)
   :                       +- * SortMergeJoin Inner (90)
   :                          :- * Sort (87)
   :                          :  +- Exchange (86)
   :                          :     +- * Project (85)
   :                          :        +- * BroadcastHashJoin Inner BuildRight (84)
   :                          :           :- * Project (78)
   :                          :           :  +- * Filter (77)
   :                          :           :     +- * ColumnarToRow (76)
   :                          :           :        +- Scan parquet spark_catalog.default.customer (75)
   :                          :           +- BroadcastExchange (83)
   :                          :              +- * Project (82)
   :                          :                 +- * Filter (81)
   :                          :                    +- * ColumnarToRow (80)
   :                          :                       +- Scan parquet spark_catalog.default.customer_address (79)
   :                          +- * Sort (89)
   :                             +- ReusedExchange (88)
   :- * HashAggregate (133)
   :  +- Exchange (132)
   :     +- * HashAggregate (131)
   :        +- * Project (130)
   :           +- * BroadcastHashJoin Inner BuildRight (129)
   :              :- * Project (127)
   :              :  +- * BroadcastHashJoin Inner BuildRight (126)
   :              :     :- * Project (107)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (106)
   :              :     :     :- * Project (104)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (103)
   :              :     :     :     :- * Filter (101)
   :              :     :     :     :  +- * ColumnarToRow (100)
   :              :     :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (99)
   :              :     :     :     +- ReusedExchange (102)
   :              :     :     +- ReusedExchange (105)
   :              :     +- BroadcastExchange (125)
   :              :        +- * Project (124)
   :              :           +- * BroadcastHashJoin Inner BuildLeft (123)
   :              :              :- BroadcastExchange (119)
   :              :              :  +- * Project (118)
   :              :              :     +- * BroadcastHashJoin Inner BuildRight (117)
   :              :              :        :- * Project (111)
   :              :              :        :  +- * Filter (110)
   :              :              :        :     +- * ColumnarToRow (109)
   :              :              :        :        +- Scan parquet spark_catalog.default.customer (108)
   :              :              :        +- BroadcastExchange (116)
   :              :              :           +- * Project (115)
   :              :              :              +- * Filter (114)
   :              :              :                 +- * ColumnarToRow (113)
   :              :              :                    +- Scan parquet spark_catalog.default.customer_address (112)
   :              :              +- * Filter (122)
   :              :                 +- * ColumnarToRow (121)
   :              :                    +- Scan parquet spark_catalog.default.customer_demographics (120)
   :              +- ReusedExchange (128)
   +- * HashAggregate (154)
      +- Exchange (153)
         +- * HashAggregate (152)
            +- * Project (151)
               +- * BroadcastHashJoin Inner BuildRight (150)
                  :- * Project (148)
                  :  +- * BroadcastHashJoin Inner BuildRight (147)
                  :     :- * Project (142)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (141)
                  :     :     :- * Project (139)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (138)
                  :     :     :     :- * Filter (136)
                  :     :     :     :  +- * ColumnarToRow (135)
                  :     :     :     :     +- Scan parquet spark_catalog.default.catalog_sales (134)
                  :     :     :     +- ReusedExchange (137)
                  :     :     +- ReusedExchange (140)
                  :     +- BroadcastExchange (146)
                  :        +- * Filter (145)
                  :           +- * ColumnarToRow (144)
                  :              +- Scan parquet spark_catalog.default.item (143)
                  +- ReusedExchange (149)


(1) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(2) ColumnarToRow [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(3) Filter [codegen id : 4]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#11, [id=#12]), xxhash64(cs_bill_cdemo_sk#2, 42)))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Condition : ((((isnotnull(cd_gender#14) AND isnotnull(cd_education_status#15)) AND (cd_gender#14 = M)) AND (cd_education_status#15 = College             )) AND isnotnull(cd_demo_sk#13))

(7) Project [codegen id : 1]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(8) BroadcastExchange
Input [2]: [cd_demo_sk#13, cd_dep_count#16]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(10) Project [codegen id : 4]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(11) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#17]

(12) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(13) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(14) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#18, i_item_id#19]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]

(16) Filter [codegen id : 3]
Input [2]: [i_item_sk#18, i_item_id#19]
Condition : isnotnull(i_item_sk#18)

(17) BroadcastExchange
Input [2]: [i_item_sk#18, i_item_id#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 4]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(19) Project [codegen id : 4]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18, i_item_id#19]

(20) Exchange
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: hashpartitioning(cs_bill_customer_sk#1, 5), ENSURE_REQUIREMENTS, [plan_id=3]

(21) Sort [codegen id : 5]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(22) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(23) ColumnarToRow [codegen id : 7]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(24) Filter [codegen id : 7]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Condition : (((c_birth_month#23 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#21)) AND isnotnull(c_current_addr_sk#22))

(25) Project [codegen id : 7]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(26) Scan parquet spark_catalog.default.customer_address
Output [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_county:string,ca_state:string,ca_country:string>

(27) ColumnarToRow [codegen id : 6]
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]

(28) Filter [codegen id : 6]
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(29) BroadcastExchange
Input [4]: [ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=4]

(30) BroadcastHashJoin [codegen id : 7]
Left keys [1]: [c_current_addr_sk#22]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(31) Project [codegen id : 7]
Output [6]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]
Input [8]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24, ca_address_sk#25, ca_county#26, ca_state#27, ca_country#28]

(32) Exchange
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]
Arguments: hashpartitioning(c_current_cdemo_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=5]

(33) Sort [codegen id : 8]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]
Arguments: [c_current_cdemo_sk#21 ASC NULLS FIRST], false, 0

(34) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(35) ColumnarToRow [codegen id : 9]
Input [1]: [cd_demo_sk#29]

(36) Filter [codegen id : 9]
Input [1]: [cd_demo_sk#29]
Condition : isnotnull(cd_demo_sk#29)

(37) Exchange
Input [1]: [cd_demo_sk#29]
Arguments: hashpartitioning(cd_demo_sk#29, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(38) Sort [codegen id : 10]
Input [1]: [cd_demo_sk#29]
Arguments: [cd_demo_sk#29 ASC NULLS FIRST], false, 0

(39) SortMergeJoin [codegen id : 11]
Left keys [1]: [c_current_cdemo_sk#21]
Right keys [1]: [cd_demo_sk#29]
Join type: Inner
Join condition: None

(40) Project [codegen id : 11]
Output [5]: [c_customer_sk#20, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]
Input [7]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28, cd_demo_sk#29]

(41) Exchange
Input [5]: [c_customer_sk#20, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=7]

(42) Sort [codegen id : 12]
Input [5]: [c_customer_sk#20, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(43) SortMergeJoin [codegen id : 13]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(44) Project [codegen id : 13]
Output [11]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, cast(cs_quantity#4 as decimal(12,2)) AS agg1#30, cast(cs_list_price#5 as decimal(12,2)) AS agg2#31, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#32, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#33, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#34, cast(c_birth_year#24 as decimal(12,2)) AS agg6#35, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#36]
Input [13]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#24, ca_county#26, ca_state#27, ca_country#28]

(45) HashAggregate [codegen id : 13]
Input [11]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, agg1#30, agg2#31, agg3#32, agg4#33, agg5#34, agg6#35, agg7#36]
Keys [4]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26]
Functions [7]: [partial_avg(agg1#30), partial_avg(agg2#31), partial_avg(agg3#32), partial_avg(agg4#33), partial_avg(agg5#34), partial_avg(agg6#35), partial_avg(agg7#36)]
Aggregate Attributes [14]: [sum#37, count#38, sum#39, count#40, sum#41, count#42, sum#43, count#44, sum#45, count#46, sum#47, count#48, sum#49, count#50]
Results [18]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64]

(46) Exchange
Input [18]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64]
Arguments: hashpartitioning(i_item_id#19, ca_country#28, ca_state#27, ca_county#26, 5), ENSURE_REQUIREMENTS, [plan_id=8]

(47) HashAggregate [codegen id : 14]
Input [18]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, sum#51, count#52, sum#53, count#54, sum#55, count#56, sum#57, count#58, sum#59, count#60, sum#61, count#62, sum#63, count#64]
Keys [4]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26]
Functions [7]: [avg(agg1#30), avg(agg2#31), avg(agg3#32), avg(agg4#33), avg(agg5#34), avg(agg6#35), avg(agg7#36)]
Aggregate Attributes [7]: [avg(agg1#30)#65, avg(agg2#31)#66, avg(agg3#32)#67, avg(agg4#33)#68, avg(agg5#34)#69, avg(agg6#35)#70, avg(agg7#36)#71]
Results [11]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, avg(agg1#30)#65 AS agg1#72, avg(agg2#31)#66 AS agg2#73, avg(agg3#32)#67 AS agg3#74, avg(agg4#33)#68 AS agg4#75, avg(agg5#34)#69 AS agg5#76, avg(agg6#35)#70 AS agg6#77, avg(agg7#36)#71 AS agg7#78]

(48) ReusedExchange [Reuses operator id: 20]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]

(49) Sort [codegen id : 19]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(50) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(51) ColumnarToRow [codegen id : 21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(52) Filter [codegen id : 21]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Condition : (((c_birth_month#23 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#21)) AND isnotnull(c_current_addr_sk#22))

(53) Project [codegen id : 21]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(54) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(55) ColumnarToRow [codegen id : 20]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]

(56) Filter [codegen id : 20]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(57) BroadcastExchange
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=9]

(58) BroadcastHashJoin [codegen id : 21]
Left keys [1]: [c_current_addr_sk#22]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(59) Project [codegen id : 21]
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_state#27, ca_country#28]
Input [7]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24, ca_address_sk#25, ca_state#27, ca_country#28]

(60) Exchange
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_state#27, ca_country#28]
Arguments: hashpartitioning(c_current_cdemo_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=10]

(61) Sort [codegen id : 22]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_state#27, ca_country#28]
Arguments: [c_current_cdemo_sk#21 ASC NULLS FIRST], false, 0

(62) ReusedExchange [Reuses operator id: 37]
Output [1]: [cd_demo_sk#29]

(63) Sort [codegen id : 24]
Input [1]: [cd_demo_sk#29]
Arguments: [cd_demo_sk#29 ASC NULLS FIRST], false, 0

(64) SortMergeJoin [codegen id : 25]
Left keys [1]: [c_current_cdemo_sk#21]
Right keys [1]: [cd_demo_sk#29]
Join type: Inner
Join condition: None

(65) Project [codegen id : 25]
Output [4]: [c_customer_sk#20, c_birth_year#24, ca_state#27, ca_country#28]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_state#27, ca_country#28, cd_demo_sk#29]

(66) Exchange
Input [4]: [c_customer_sk#20, c_birth_year#24, ca_state#27, ca_country#28]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=11]

(67) Sort [codegen id : 26]
Input [4]: [c_customer_sk#20, c_birth_year#24, ca_state#27, ca_country#28]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(68) SortMergeJoin [codegen id : 27]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(69) Project [codegen id : 27]
Output [10]: [i_item_id#19, ca_country#28, ca_state#27, cast(cs_quantity#4 as decimal(12,2)) AS agg1#30, cast(cs_list_price#5 as decimal(12,2)) AS agg2#31, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#32, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#33, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#34, cast(c_birth_year#24 as decimal(12,2)) AS agg6#35, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#36]
Input [12]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#24, ca_state#27, ca_country#28]

(70) HashAggregate [codegen id : 27]
Input [10]: [i_item_id#19, ca_country#28, ca_state#27, agg1#30, agg2#31, agg3#32, agg4#33, agg5#34, agg6#35, agg7#36]
Keys [3]: [i_item_id#19, ca_country#28, ca_state#27]
Functions [7]: [partial_avg(agg1#30), partial_avg(agg2#31), partial_avg(agg3#32), partial_avg(agg4#33), partial_avg(agg5#34), partial_avg(agg6#35), partial_avg(agg7#36)]
Aggregate Attributes [14]: [sum#79, count#80, sum#81, count#82, sum#83, count#84, sum#85, count#86, sum#87, count#88, sum#89, count#90, sum#91, count#92]
Results [17]: [i_item_id#19, ca_country#28, ca_state#27, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104, sum#105, count#106]

(71) Exchange
Input [17]: [i_item_id#19, ca_country#28, ca_state#27, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104, sum#105, count#106]
Arguments: hashpartitioning(i_item_id#19, ca_country#28, ca_state#27, 5), ENSURE_REQUIREMENTS, [plan_id=12]

(72) HashAggregate [codegen id : 28]
Input [17]: [i_item_id#19, ca_country#28, ca_state#27, sum#93, count#94, sum#95, count#96, sum#97, count#98, sum#99, count#100, sum#101, count#102, sum#103, count#104, sum#105, count#106]
Keys [3]: [i_item_id#19, ca_country#28, ca_state#27]
Functions [7]: [avg(agg1#30), avg(agg2#31), avg(agg3#32), avg(agg4#33), avg(agg5#34), avg(agg6#35), avg(agg7#36)]
Aggregate Attributes [7]: [avg(agg1#30)#107, avg(agg2#31)#108, avg(agg3#32)#109, avg(agg4#33)#110, avg(agg5#34)#111, avg(agg6#35)#112, avg(agg7#36)#113]
Results [11]: [i_item_id#19, ca_country#28, ca_state#27, null AS county#114, avg(agg1#30)#107 AS agg1#115, avg(agg2#31)#108 AS agg2#116, avg(agg3#32)#109 AS agg3#117, avg(agg4#33)#110 AS agg4#118, avg(agg5#34)#111 AS agg5#119, avg(agg6#35)#112 AS agg6#120, avg(agg7#36)#113 AS agg7#121]

(73) ReusedExchange [Reuses operator id: 20]
Output [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]

(74) Sort [codegen id : 33]
Input [8]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19]
Arguments: [cs_bill_customer_sk#1 ASC NULLS FIRST], false, 0

(75) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(76) ColumnarToRow [codegen id : 35]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(77) Filter [codegen id : 35]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Condition : (((c_birth_month#23 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#21)) AND isnotnull(c_current_addr_sk#22))

(78) Project [codegen id : 35]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(79) Scan parquet spark_catalog.default.customer_address
Output [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string,ca_country:string>

(80) ColumnarToRow [codegen id : 34]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]

(81) Filter [codegen id : 34]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(82) Project [codegen id : 34]
Output [2]: [ca_address_sk#25, ca_country#28]
Input [3]: [ca_address_sk#25, ca_state#27, ca_country#28]

(83) BroadcastExchange
Input [2]: [ca_address_sk#25, ca_country#28]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=13]

(84) BroadcastHashJoin [codegen id : 35]
Left keys [1]: [c_current_addr_sk#22]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(85) Project [codegen id : 35]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_country#28]
Input [6]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24, ca_address_sk#25, ca_country#28]

(86) Exchange
Input [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_country#28]
Arguments: hashpartitioning(c_current_cdemo_sk#21, 5), ENSURE_REQUIREMENTS, [plan_id=14]

(87) Sort [codegen id : 36]
Input [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_country#28]
Arguments: [c_current_cdemo_sk#21 ASC NULLS FIRST], false, 0

(88) ReusedExchange [Reuses operator id: 37]
Output [1]: [cd_demo_sk#29]

(89) Sort [codegen id : 38]
Input [1]: [cd_demo_sk#29]
Arguments: [cd_demo_sk#29 ASC NULLS FIRST], false, 0

(90) SortMergeJoin [codegen id : 39]
Left keys [1]: [c_current_cdemo_sk#21]
Right keys [1]: [cd_demo_sk#29]
Join type: Inner
Join condition: None

(91) Project [codegen id : 39]
Output [3]: [c_customer_sk#20, c_birth_year#24, ca_country#28]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, ca_country#28, cd_demo_sk#29]

(92) Exchange
Input [3]: [c_customer_sk#20, c_birth_year#24, ca_country#28]
Arguments: hashpartitioning(c_customer_sk#20, 5), ENSURE_REQUIREMENTS, [plan_id=15]

(93) Sort [codegen id : 40]
Input [3]: [c_customer_sk#20, c_birth_year#24, ca_country#28]
Arguments: [c_customer_sk#20 ASC NULLS FIRST], false, 0

(94) SortMergeJoin [codegen id : 41]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(95) Project [codegen id : 41]
Output [9]: [i_item_id#19, ca_country#28, cast(cs_quantity#4 as decimal(12,2)) AS agg1#30, cast(cs_list_price#5 as decimal(12,2)) AS agg2#31, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#32, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#33, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#34, cast(c_birth_year#24 as decimal(12,2)) AS agg6#35, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#36]
Input [11]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_id#19, c_customer_sk#20, c_birth_year#24, ca_country#28]

(96) HashAggregate [codegen id : 41]
Input [9]: [i_item_id#19, ca_country#28, agg1#30, agg2#31, agg3#32, agg4#33, agg5#34, agg6#35, agg7#36]
Keys [2]: [i_item_id#19, ca_country#28]
Functions [7]: [partial_avg(agg1#30), partial_avg(agg2#31), partial_avg(agg3#32), partial_avg(agg4#33), partial_avg(agg5#34), partial_avg(agg6#35), partial_avg(agg7#36)]
Aggregate Attributes [14]: [sum#122, count#123, sum#124, count#125, sum#126, count#127, sum#128, count#129, sum#130, count#131, sum#132, count#133, sum#134, count#135]
Results [16]: [i_item_id#19, ca_country#28, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147, sum#148, count#149]

(97) Exchange
Input [16]: [i_item_id#19, ca_country#28, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147, sum#148, count#149]
Arguments: hashpartitioning(i_item_id#19, ca_country#28, 5), ENSURE_REQUIREMENTS, [plan_id=16]

(98) HashAggregate [codegen id : 42]
Input [16]: [i_item_id#19, ca_country#28, sum#136, count#137, sum#138, count#139, sum#140, count#141, sum#142, count#143, sum#144, count#145, sum#146, count#147, sum#148, count#149]
Keys [2]: [i_item_id#19, ca_country#28]
Functions [7]: [avg(agg1#30), avg(agg2#31), avg(agg3#32), avg(agg4#33), avg(agg5#34), avg(agg6#35), avg(agg7#36)]
Aggregate Attributes [7]: [avg(agg1#30)#150, avg(agg2#31)#151, avg(agg3#32)#152, avg(agg4#33)#153, avg(agg5#34)#154, avg(agg6#35)#155, avg(agg7#36)#156]
Results [11]: [i_item_id#19, ca_country#28, null AS ca_state#157, null AS county#158, avg(agg1#30)#150 AS agg1#159, avg(agg2#31)#151 AS agg2#160, avg(agg3#32)#152 AS agg3#161, avg(agg4#33)#153 AS agg4#162, avg(agg5#34)#154 AS agg5#163, avg(agg6#35)#155 AS agg6#164, avg(agg7#36)#156 AS agg7#165]

(99) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(100) ColumnarToRow [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(101) Filter [codegen id : 49]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#11, [id=#12]), xxhash64(cs_bill_cdemo_sk#2, 42)))

(102) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]

(103) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(104) Project [codegen id : 49]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(105) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#17]

(106) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(107) Project [codegen id : 49]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(108) Scan parquet spark_catalog.default.customer
Output [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer]
PushedFilters: [In(c_birth_month, [1,10,12,4,5,9]), IsNotNull(c_customer_sk), IsNotNull(c_current_cdemo_sk), IsNotNull(c_current_addr_sk)]
ReadSchema: struct<c_customer_sk:int,c_current_cdemo_sk:int,c_current_addr_sk:int,c_birth_month:int,c_birth_year:int>

(109) ColumnarToRow [codegen id : 46]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(110) Filter [codegen id : 46]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]
Condition : (((c_birth_month#23 IN (9,5,12,4,1,10) AND isnotnull(c_customer_sk#20)) AND isnotnull(c_current_cdemo_sk#21)) AND isnotnull(c_current_addr_sk#22))

(111) Project [codegen id : 46]
Output [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_month#23, c_birth_year#24]

(112) Scan parquet spark_catalog.default.customer_address
Output [2]: [ca_address_sk#25, ca_state#27]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_address]
PushedFilters: [In(ca_state, [AL,MS,NC,ND,OK,TN,WI]), IsNotNull(ca_address_sk)]
ReadSchema: struct<ca_address_sk:int,ca_state:string>

(113) ColumnarToRow [codegen id : 45]
Input [2]: [ca_address_sk#25, ca_state#27]

(114) Filter [codegen id : 45]
Input [2]: [ca_address_sk#25, ca_state#27]
Condition : (ca_state#27 IN (ND,WI,AL,NC,OK,MS,TN) AND isnotnull(ca_address_sk#25))

(115) Project [codegen id : 45]
Output [1]: [ca_address_sk#25]
Input [2]: [ca_address_sk#25, ca_state#27]

(116) BroadcastExchange
Input [1]: [ca_address_sk#25]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=17]

(117) BroadcastHashJoin [codegen id : 46]
Left keys [1]: [c_current_addr_sk#22]
Right keys [1]: [ca_address_sk#25]
Join type: Inner
Join condition: None

(118) Project [codegen id : 46]
Output [3]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24]
Input [5]: [c_customer_sk#20, c_current_cdemo_sk#21, c_current_addr_sk#22, c_birth_year#24, ca_address_sk#25]

(119) BroadcastExchange
Input [3]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[1, int, true] as bigint)),false), [plan_id=18]

(120) Scan parquet spark_catalog.default.customer_demographics
Output [1]: [cd_demo_sk#29]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int>

(121) ColumnarToRow
Input [1]: [cd_demo_sk#29]

(122) Filter
Input [1]: [cd_demo_sk#29]
Condition : isnotnull(cd_demo_sk#29)

(123) BroadcastHashJoin [codegen id : 47]
Left keys [1]: [c_current_cdemo_sk#21]
Right keys [1]: [cd_demo_sk#29]
Join type: Inner
Join condition: None

(124) Project [codegen id : 47]
Output [2]: [c_customer_sk#20, c_birth_year#24]
Input [4]: [c_customer_sk#20, c_current_cdemo_sk#21, c_birth_year#24, cd_demo_sk#29]

(125) BroadcastExchange
Input [2]: [c_customer_sk#20, c_birth_year#24]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=19]

(126) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(127) Project [codegen id : 49]
Output [8]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#24]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_customer_sk#20, c_birth_year#24]

(128) ReusedExchange [Reuses operator id: 17]
Output [2]: [i_item_sk#18, i_item_id#19]

(129) BroadcastHashJoin [codegen id : 49]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(130) Project [codegen id : 49]
Output [8]: [i_item_id#19, cast(cs_quantity#4 as decimal(12,2)) AS agg1#30, cast(cs_list_price#5 as decimal(12,2)) AS agg2#31, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#32, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#33, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#34, cast(c_birth_year#24 as decimal(12,2)) AS agg6#35, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#36]
Input [10]: [cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_birth_year#24, i_item_sk#18, i_item_id#19]

(131) HashAggregate [codegen id : 49]
Input [8]: [i_item_id#19, agg1#30, agg2#31, agg3#32, agg4#33, agg5#34, agg6#35, agg7#36]
Keys [1]: [i_item_id#19]
Functions [7]: [partial_avg(agg1#30), partial_avg(agg2#31), partial_avg(agg3#32), partial_avg(agg4#33), partial_avg(agg5#34), partial_avg(agg6#35), partial_avg(agg7#36)]
Aggregate Attributes [14]: [sum#166, count#167, sum#168, count#169, sum#170, count#171, sum#172, count#173, sum#174, count#175, sum#176, count#177, sum#178, count#179]
Results [15]: [i_item_id#19, sum#180, count#181, sum#182, count#183, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193]

(132) Exchange
Input [15]: [i_item_id#19, sum#180, count#181, sum#182, count#183, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193]
Arguments: hashpartitioning(i_item_id#19, 5), ENSURE_REQUIREMENTS, [plan_id=20]

(133) HashAggregate [codegen id : 50]
Input [15]: [i_item_id#19, sum#180, count#181, sum#182, count#183, sum#184, count#185, sum#186, count#187, sum#188, count#189, sum#190, count#191, sum#192, count#193]
Keys [1]: [i_item_id#19]
Functions [7]: [avg(agg1#30), avg(agg2#31), avg(agg3#32), avg(agg4#33), avg(agg5#34), avg(agg6#35), avg(agg7#36)]
Aggregate Attributes [7]: [avg(agg1#30)#194, avg(agg2#31)#195, avg(agg3#32)#196, avg(agg4#33)#197, avg(agg5#34)#198, avg(agg6#35)#199, avg(agg7#36)#200]
Results [11]: [i_item_id#19, null AS ca_country#201, null AS ca_state#202, null AS county#203, avg(agg1#30)#194 AS agg1#204, avg(agg2#31)#195 AS agg2#205, avg(agg3#32)#196 AS agg3#206, avg(agg4#33)#197 AS agg4#207, avg(agg5#34)#198 AS agg5#208, avg(agg6#35)#199 AS agg6#209, avg(agg7#36)#200 AS agg7#210]

(134) Scan parquet spark_catalog.default.catalog_sales
Output [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(cs_sold_date_sk#9), dynamicpruningexpression(cs_sold_date_sk#9 IN dynamicpruning#10)]
PushedFilters: [IsNotNull(cs_bill_cdemo_sk), IsNotNull(cs_bill_customer_sk), IsNotNull(cs_item_sk)]
ReadSchema: struct<cs_bill_customer_sk:int,cs_bill_cdemo_sk:int,cs_item_sk:int,cs_quantity:int,cs_list_price:decimal(7,2),cs_sales_price:decimal(7,2),cs_coupon_amt:decimal(7,2),cs_net_profit:decimal(7,2)>

(135) ColumnarToRow [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]

(136) Filter [codegen id : 57]
Input [9]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9]
Condition : (((isnotnull(cs_bill_cdemo_sk#2) AND isnotnull(cs_bill_customer_sk#1)) AND isnotnull(cs_item_sk#3)) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#11, [id=#12]), xxhash64(cs_bill_cdemo_sk#2, 42)))

(137) ReusedExchange [Reuses operator id: 8]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]

(138) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#13]
Join type: Inner
Join condition: None

(139) Project [codegen id : 57]
Output [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16]
Input [11]: [cs_bill_customer_sk#1, cs_bill_cdemo_sk#2, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_demo_sk#13, cd_dep_count#16]

(140) ReusedExchange [Reuses operator id: 168]
Output [1]: [d_date_sk#17]

(141) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_sold_date_sk#9]
Right keys [1]: [d_date_sk#17]
Join type: Inner
Join condition: None

(142) Project [codegen id : 57]
Output [8]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [10]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cs_sold_date_sk#9, cd_dep_count#16, d_date_sk#17]

(143) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#18]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(144) ColumnarToRow [codegen id : 53]
Input [1]: [i_item_sk#18]

(145) Filter [codegen id : 53]
Input [1]: [i_item_sk#18]
Condition : isnotnull(i_item_sk#18)

(146) BroadcastExchange
Input [1]: [i_item_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=21]

(147) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_item_sk#3]
Right keys [1]: [i_item_sk#18]
Join type: Inner
Join condition: None

(148) Project [codegen id : 57]
Output [7]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16]
Input [9]: [cs_bill_customer_sk#1, cs_item_sk#3, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, i_item_sk#18]

(149) ReusedExchange [Reuses operator id: 125]
Output [2]: [c_customer_sk#20, c_birth_year#24]

(150) BroadcastHashJoin [codegen id : 57]
Left keys [1]: [cs_bill_customer_sk#1]
Right keys [1]: [c_customer_sk#20]
Join type: Inner
Join condition: None

(151) Project [codegen id : 57]
Output [7]: [cast(cs_quantity#4 as decimal(12,2)) AS agg1#30, cast(cs_list_price#5 as decimal(12,2)) AS agg2#31, cast(cs_coupon_amt#7 as decimal(12,2)) AS agg3#32, cast(cs_sales_price#6 as decimal(12,2)) AS agg4#33, cast(cs_net_profit#8 as decimal(12,2)) AS agg5#34, cast(c_birth_year#24 as decimal(12,2)) AS agg6#35, cast(cd_dep_count#16 as decimal(12,2)) AS agg7#36]
Input [9]: [cs_bill_customer_sk#1, cs_quantity#4, cs_list_price#5, cs_sales_price#6, cs_coupon_amt#7, cs_net_profit#8, cd_dep_count#16, c_customer_sk#20, c_birth_year#24]

(152) HashAggregate [codegen id : 57]
Input [7]: [agg1#30, agg2#31, agg3#32, agg4#33, agg5#34, agg6#35, agg7#36]
Keys: []
Functions [7]: [partial_avg(agg1#30), partial_avg(agg2#31), partial_avg(agg3#32), partial_avg(agg4#33), partial_avg(agg5#34), partial_avg(agg6#35), partial_avg(agg7#36)]
Aggregate Attributes [14]: [sum#211, count#212, sum#213, count#214, sum#215, count#216, sum#217, count#218, sum#219, count#220, sum#221, count#222, sum#223, count#224]
Results [14]: [sum#225, count#226, sum#227, count#228, sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238]

(153) Exchange
Input [14]: [sum#225, count#226, sum#227, count#228, sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=22]

(154) HashAggregate [codegen id : 58]
Input [14]: [sum#225, count#226, sum#227, count#228, sum#229, count#230, sum#231, count#232, sum#233, count#234, sum#235, count#236, sum#237, count#238]
Keys: []
Functions [7]: [avg(agg1#30), avg(agg2#31), avg(agg3#32), avg(agg4#33), avg(agg5#34), avg(agg6#35), avg(agg7#36)]
Aggregate Attributes [7]: [avg(agg1#30)#239, avg(agg2#31)#240, avg(agg3#32)#241, avg(agg4#33)#242, avg(agg5#34)#243, avg(agg6#35)#244, avg(agg7#36)#245]
Results [11]: [null AS i_item_id#246, null AS ca_country#247, null AS ca_state#248, null AS county#249, avg(agg1#30)#239 AS agg1#250, avg(agg2#31)#240 AS agg2#251, avg(agg3#32)#241 AS agg3#252, avg(agg4#33)#242 AS agg4#253, avg(agg5#34)#243 AS agg5#254, avg(agg6#35)#244 AS agg6#255, avg(agg7#36)#245 AS agg7#256]

(155) Union

(156) TakeOrderedAndProject
Input [11]: [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, agg1#72, agg2#73, agg3#74, agg4#75, agg5#76, agg6#77, agg7#78]
Arguments: 100, [ca_country#28 ASC NULLS FIRST, ca_state#27 ASC NULLS FIRST, ca_county#26 ASC NULLS FIRST, i_item_id#19 ASC NULLS FIRST], [i_item_id#19, ca_country#28, ca_state#27, ca_county#26, agg1#72, agg2#73, agg3#74, agg4#75, agg5#76, agg6#77, agg7#78]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#11, [id=#12]
ObjectHashAggregate (163)
+- Exchange (162)
   +- ObjectHashAggregate (161)
      +- * Project (160)
         +- * Filter (159)
            +- * ColumnarToRow (158)
               +- Scan parquet spark_catalog.default.customer_demographics (157)


(157) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_education_status), EqualTo(cd_gender,M), EqualTo(cd_education_status,College             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_education_status:string,cd_dep_count:int>

(158) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(159) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]
Condition : ((((isnotnull(cd_gender#14) AND isnotnull(cd_education_status#15)) AND (cd_gender#14 = M)) AND (cd_education_status#15 = College             )) AND isnotnull(cd_demo_sk#13))

(160) Project [codegen id : 1]
Output [2]: [cd_demo_sk#13, cd_dep_count#16]
Input [4]: [cd_demo_sk#13, cd_gender#14, cd_education_status#15, cd_dep_count#16]

(161) ObjectHashAggregate
Input [2]: [cd_demo_sk#13, cd_dep_count#16]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#13, 42), 137200, 1097600, 0, 0)]
Aggregate Attributes [1]: [buf#257]
Results [1]: [buf#258]

(162) Exchange
Input [1]: [buf#258]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=23]

(163) ObjectHashAggregate
Input [1]: [buf#258]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#13, 42), 137200, 1097600, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#13, 42), 137200, 1097600, 0, 0)#259]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#13, 42), 137200, 1097600, 0, 0)#259 AS bloomFilter#260]

Subquery:2 Hosting operator id = 1 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10
BroadcastExchange (168)
+- * Project (167)
   +- * Filter (166)
      +- * ColumnarToRow (165)
         +- Scan parquet spark_catalog.default.date_dim (164)


(164) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#17, d_year#261]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,2001), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(165) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#17, d_year#261]

(166) Filter [codegen id : 1]
Input [2]: [d_date_sk#17, d_year#261]
Condition : ((isnotnull(d_year#261) AND (d_year#261 = 2001)) AND isnotnull(d_date_sk#17))

(167) Project [codegen id : 1]
Output [1]: [d_date_sk#17]
Input [2]: [d_date_sk#17, d_year#261]

(168) BroadcastExchange
Input [1]: [d_date_sk#17]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=24]

Subquery:3 Hosting operator id = 101 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:4 Hosting operator id = 99 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10

Subquery:5 Hosting operator id = 136 Hosting Expression = ReusedSubquery Subquery scalar-subquery#11, [id=#12]

Subquery:6 Hosting operator id = 134 Hosting Expression = cs_sold_date_sk#9 IN dynamicpruning#10


