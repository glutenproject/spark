== Physical Plan ==
TakeOrderedAndProject (73)
+- Union (72)
   :- * HashAggregate (28)
   :  +- Exchange (27)
   :     +- * HashAggregate (26)
   :        +- * Project (25)
   :           +- * BroadcastHashJoin Inner BuildRight (24)
   :              :- * Project (19)
   :              :  +- * BroadcastHashJoin Inner BuildRight (18)
   :              :     :- * Project (13)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (12)
   :              :     :     :- * Project (10)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (9)
   :              :     :     :     :- * Filter (3)
   :              :     :     :     :  +- * ColumnarToRow (2)
   :              :     :     :     :     +- Scan parquet spark_catalog.default.store_sales (1)
   :              :     :     :     +- BroadcastExchange (8)
   :              :     :     :        +- * Project (7)
   :              :     :     :           +- * Filter (6)
   :              :     :     :              +- * ColumnarToRow (5)
   :              :     :     :                 +- Scan parquet spark_catalog.default.customer_demographics (4)
   :              :     :     +- ReusedExchange (11)
   :              :     +- BroadcastExchange (17)
   :              :        +- * Filter (16)
   :              :           +- * ColumnarToRow (15)
   :              :              +- Scan parquet spark_catalog.default.store (14)
   :              +- BroadcastExchange (23)
   :                 +- * Filter (22)
   :                    +- * ColumnarToRow (21)
   :                       +- Scan parquet spark_catalog.default.item (20)
   :- * HashAggregate (50)
   :  +- Exchange (49)
   :     +- * HashAggregate (48)
   :        +- * Project (47)
   :           +- * BroadcastHashJoin Inner BuildRight (46)
   :              :- * Project (44)
   :              :  +- * BroadcastHashJoin Inner BuildRight (43)
   :              :     :- * Project (41)
   :              :     :  +- * BroadcastHashJoin Inner BuildRight (40)
   :              :     :     :- * Project (34)
   :              :     :     :  +- * BroadcastHashJoin Inner BuildRight (33)
   :              :     :     :     :- * Filter (31)
   :              :     :     :     :  +- * ColumnarToRow (30)
   :              :     :     :     :     +- Scan parquet spark_catalog.default.store_sales (29)
   :              :     :     :     +- ReusedExchange (32)
   :              :     :     +- BroadcastExchange (39)
   :              :     :        +- * Project (38)
   :              :     :           +- * Filter (37)
   :              :     :              +- * ColumnarToRow (36)
   :              :     :                 +- Scan parquet spark_catalog.default.store (35)
   :              :     +- ReusedExchange (42)
   :              +- ReusedExchange (45)
   +- * HashAggregate (71)
      +- Exchange (70)
         +- * HashAggregate (69)
            +- * Project (68)
               +- * BroadcastHashJoin Inner BuildRight (67)
                  :- * Project (62)
                  :  +- * BroadcastHashJoin Inner BuildRight (61)
                  :     :- * Project (59)
                  :     :  +- * BroadcastHashJoin Inner BuildRight (58)
                  :     :     :- * Project (56)
                  :     :     :  +- * BroadcastHashJoin Inner BuildRight (55)
                  :     :     :     :- * Filter (53)
                  :     :     :     :  +- * ColumnarToRow (52)
                  :     :     :     :     +- Scan parquet spark_catalog.default.store_sales (51)
                  :     :     :     +- ReusedExchange (54)
                  :     :     +- ReusedExchange (57)
                  :     +- ReusedExchange (60)
                  +- BroadcastExchange (66)
                     +- * Filter (65)
                        +- * ColumnarToRow (64)
                           +- Scan parquet spark_catalog.default.item (63)


(1) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(2) ColumnarToRow [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(3) Filter [codegen id : 5]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1)) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#10, [id=#11]), xxhash64(ss_cdemo_sk#2, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#12, [id=#13]), xxhash64(ss_store_sk#3, 42)))

(4) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(5) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(6) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Condition : ((((((isnotnull(cd_gender#15) AND isnotnull(cd_marital_status#16)) AND isnotnull(cd_education_status#17)) AND (cd_gender#15 = F)) AND (cd_marital_status#16 = W)) AND (cd_education_status#17 = Primary             )) AND isnotnull(cd_demo_sk#14))

(7) Project [codegen id : 1]
Output [1]: [cd_demo_sk#14]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(8) BroadcastExchange
Input [1]: [cd_demo_sk#14]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=1]

(9) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join type: Inner
Join condition: None

(10) Project [codegen id : 5]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#14]

(11) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#18]

(12) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(13) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#18]

(14) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(15) ColumnarToRow [codegen id : 3]
Input [2]: [s_store_sk#19, s_state#20]

(16) Filter [codegen id : 3]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(17) BroadcastExchange
Input [2]: [s_store_sk#19, s_state#20]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=2]

(18) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#19]
Join type: Inner
Join condition: None

(19) Project [codegen id : 5]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#20]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_store_sk#19, s_state#20]

(20) Scan parquet spark_catalog.default.item
Output [2]: [i_item_sk#21, i_item_id#22]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int,i_item_id:string>

(21) ColumnarToRow [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]

(22) Filter [codegen id : 4]
Input [2]: [i_item_sk#21, i_item_id#22]
Condition : isnotnull(i_item_sk#21)

(23) BroadcastExchange
Input [2]: [i_item_sk#21, i_item_id#22]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=3]

(24) BroadcastHashJoin [codegen id : 5]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(25) Project [codegen id : 5]
Output [6]: [i_item_id#22, s_state#20, ss_quantity#4 AS agg1#23, ss_list_price#5 AS agg2#24, ss_coupon_amt#7 AS agg3#25, ss_sales_price#6 AS agg4#26]
Input [8]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, s_state#20, i_item_sk#21, i_item_id#22]

(26) HashAggregate [codegen id : 5]
Input [6]: [i_item_id#22, s_state#20, agg1#23, agg2#24, agg3#25, agg4#26]
Keys [2]: [i_item_id#22, s_state#20]
Functions [4]: [partial_avg(agg1#23), partial_avg(UnscaledValue(agg2#24)), partial_avg(UnscaledValue(agg3#25)), partial_avg(UnscaledValue(agg4#26))]
Aggregate Attributes [8]: [sum#27, count#28, sum#29, count#30, sum#31, count#32, sum#33, count#34]
Results [10]: [i_item_id#22, s_state#20, sum#35, count#36, sum#37, count#38, sum#39, count#40, sum#41, count#42]

(27) Exchange
Input [10]: [i_item_id#22, s_state#20, sum#35, count#36, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Arguments: hashpartitioning(i_item_id#22, s_state#20, 5), ENSURE_REQUIREMENTS, [plan_id=4]

(28) HashAggregate [codegen id : 6]
Input [10]: [i_item_id#22, s_state#20, sum#35, count#36, sum#37, count#38, sum#39, count#40, sum#41, count#42]
Keys [2]: [i_item_id#22, s_state#20]
Functions [4]: [avg(agg1#23), avg(UnscaledValue(agg2#24)), avg(UnscaledValue(agg3#25)), avg(UnscaledValue(agg4#26))]
Aggregate Attributes [4]: [avg(agg1#23)#43, avg(UnscaledValue(agg2#24))#44, avg(UnscaledValue(agg3#25))#45, avg(UnscaledValue(agg4#26))#46]
Results [7]: [i_item_id#22, s_state#20, 0 AS g_state#47, avg(agg1#23)#43 AS agg1#48, cast((avg(UnscaledValue(agg2#24))#44 / 100.0) as decimal(11,6)) AS agg2#49, cast((avg(UnscaledValue(agg3#25))#45 / 100.0) as decimal(11,6)) AS agg3#50, cast((avg(UnscaledValue(agg4#26))#46 / 100.0) as decimal(11,6)) AS agg4#51]

(29) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(30) ColumnarToRow [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(31) Filter [codegen id : 11]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1)) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#10, [id=#11]), xxhash64(ss_cdemo_sk#2, 42))) AND might_contain(runtimefilterexpression(Subquery scalar-subquery#52, [id=#53]), xxhash64(ss_store_sk#3, 42)))

(32) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#14]

(33) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join type: Inner
Join condition: None

(34) Project [codegen id : 11]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#14]

(35) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(36) ColumnarToRow [codegen id : 8]
Input [2]: [s_store_sk#19, s_state#20]

(37) Filter [codegen id : 8]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(38) Project [codegen id : 8]
Output [1]: [s_store_sk#19]
Input [2]: [s_store_sk#19, s_state#20]

(39) BroadcastExchange
Input [1]: [s_store_sk#19]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=5]

(40) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#19]
Join type: Inner
Join condition: None

(41) Project [codegen id : 11]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, s_store_sk#19]

(42) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#18]

(43) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(44) Project [codegen id : 11]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#18]

(45) ReusedExchange [Reuses operator id: 23]
Output [2]: [i_item_sk#21, i_item_id#22]

(46) BroadcastHashJoin [codegen id : 11]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(47) Project [codegen id : 11]
Output [5]: [i_item_id#22, ss_quantity#4 AS agg1#23, ss_list_price#5 AS agg2#24, ss_coupon_amt#7 AS agg3#25, ss_sales_price#6 AS agg4#26]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#21, i_item_id#22]

(48) HashAggregate [codegen id : 11]
Input [5]: [i_item_id#22, agg1#23, agg2#24, agg3#25, agg4#26]
Keys [1]: [i_item_id#22]
Functions [4]: [partial_avg(agg1#23), partial_avg(UnscaledValue(agg2#24)), partial_avg(UnscaledValue(agg3#25)), partial_avg(UnscaledValue(agg4#26))]
Aggregate Attributes [8]: [sum#54, count#55, sum#56, count#57, sum#58, count#59, sum#60, count#61]
Results [9]: [i_item_id#22, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69]

(49) Exchange
Input [9]: [i_item_id#22, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69]
Arguments: hashpartitioning(i_item_id#22, 5), ENSURE_REQUIREMENTS, [plan_id=6]

(50) HashAggregate [codegen id : 12]
Input [9]: [i_item_id#22, sum#62, count#63, sum#64, count#65, sum#66, count#67, sum#68, count#69]
Keys [1]: [i_item_id#22]
Functions [4]: [avg(agg1#23), avg(UnscaledValue(agg2#24)), avg(UnscaledValue(agg3#25)), avg(UnscaledValue(agg4#26))]
Aggregate Attributes [4]: [avg(agg1#23)#70, avg(UnscaledValue(agg2#24))#71, avg(UnscaledValue(agg3#25))#72, avg(UnscaledValue(agg4#26))#73]
Results [7]: [i_item_id#22, null AS s_state#74, 1 AS g_state#75, avg(agg1#23)#70 AS agg1#76, cast((avg(UnscaledValue(agg2#24))#71 / 100.0) as decimal(11,6)) AS agg2#77, cast((avg(UnscaledValue(agg3#25))#72 / 100.0) as decimal(11,6)) AS agg3#78, cast((avg(UnscaledValue(agg4#26))#73 / 100.0) as decimal(11,6)) AS agg4#79]

(51) Scan parquet spark_catalog.default.store_sales
Output [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Batched: true
Location: InMemoryFileIndex []
PartitionFilters: [isnotnull(ss_sold_date_sk#8), dynamicpruningexpression(ss_sold_date_sk#8 IN dynamicpruning#9)]
PushedFilters: [IsNotNull(ss_cdemo_sk), IsNotNull(ss_store_sk), IsNotNull(ss_item_sk)]
ReadSchema: struct<ss_item_sk:int,ss_cdemo_sk:int,ss_store_sk:int,ss_quantity:int,ss_list_price:decimal(7,2),ss_sales_price:decimal(7,2),ss_coupon_amt:decimal(7,2)>

(52) ColumnarToRow [codegen id : 17]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]

(53) Filter [codegen id : 17]
Input [8]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Condition : ((((isnotnull(ss_cdemo_sk#2) AND isnotnull(ss_store_sk#3)) AND isnotnull(ss_item_sk#1)) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#10, [id=#11]), xxhash64(ss_cdemo_sk#2, 42))) AND might_contain(runtimefilterexpression(ReusedSubquery Subquery scalar-subquery#52, [id=#53]), xxhash64(ss_store_sk#3, 42)))

(54) ReusedExchange [Reuses operator id: 8]
Output [1]: [cd_demo_sk#14]

(55) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_cdemo_sk#2]
Right keys [1]: [cd_demo_sk#14]
Join type: Inner
Join condition: None

(56) Project [codegen id : 17]
Output [7]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [9]: [ss_item_sk#1, ss_cdemo_sk#2, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, cd_demo_sk#14]

(57) ReusedExchange [Reuses operator id: 39]
Output [1]: [s_store_sk#19]

(58) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_store_sk#3]
Right keys [1]: [s_store_sk#19]
Join type: Inner
Join condition: None

(59) Project [codegen id : 17]
Output [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8]
Input [8]: [ss_item_sk#1, ss_store_sk#3, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, s_store_sk#19]

(60) ReusedExchange [Reuses operator id: 91]
Output [1]: [d_date_sk#18]

(61) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_sold_date_sk#8]
Right keys [1]: [d_date_sk#18]
Join type: Inner
Join condition: None

(62) Project [codegen id : 17]
Output [5]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7]
Input [7]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, ss_sold_date_sk#8, d_date_sk#18]

(63) Scan parquet spark_catalog.default.item
Output [1]: [i_item_sk#21]
Batched: true
Location [not included in comparison]/{warehouse_dir}/item]
PushedFilters: [IsNotNull(i_item_sk)]
ReadSchema: struct<i_item_sk:int>

(64) ColumnarToRow [codegen id : 16]
Input [1]: [i_item_sk#21]

(65) Filter [codegen id : 16]
Input [1]: [i_item_sk#21]
Condition : isnotnull(i_item_sk#21)

(66) BroadcastExchange
Input [1]: [i_item_sk#21]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, false] as bigint)),false), [plan_id=7]

(67) BroadcastHashJoin [codegen id : 17]
Left keys [1]: [ss_item_sk#1]
Right keys [1]: [i_item_sk#21]
Join type: Inner
Join condition: None

(68) Project [codegen id : 17]
Output [4]: [ss_quantity#4 AS agg1#23, ss_list_price#5 AS agg2#24, ss_coupon_amt#7 AS agg3#25, ss_sales_price#6 AS agg4#26]
Input [6]: [ss_item_sk#1, ss_quantity#4, ss_list_price#5, ss_sales_price#6, ss_coupon_amt#7, i_item_sk#21]

(69) HashAggregate [codegen id : 17]
Input [4]: [agg1#23, agg2#24, agg3#25, agg4#26]
Keys: []
Functions [4]: [partial_avg(agg1#23), partial_avg(UnscaledValue(agg2#24)), partial_avg(UnscaledValue(agg3#25)), partial_avg(UnscaledValue(agg4#26))]
Aggregate Attributes [8]: [sum#80, count#81, sum#82, count#83, sum#84, count#85, sum#86, count#87]
Results [8]: [sum#88, count#89, sum#90, count#91, sum#92, count#93, sum#94, count#95]

(70) Exchange
Input [8]: [sum#88, count#89, sum#90, count#91, sum#92, count#93, sum#94, count#95]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=8]

(71) HashAggregate [codegen id : 18]
Input [8]: [sum#88, count#89, sum#90, count#91, sum#92, count#93, sum#94, count#95]
Keys: []
Functions [4]: [avg(agg1#23), avg(UnscaledValue(agg2#24)), avg(UnscaledValue(agg3#25)), avg(UnscaledValue(agg4#26))]
Aggregate Attributes [4]: [avg(agg1#23)#96, avg(UnscaledValue(agg2#24))#97, avg(UnscaledValue(agg3#25))#98, avg(UnscaledValue(agg4#26))#99]
Results [7]: [null AS i_item_id#100, null AS s_state#101, 1 AS g_state#102, avg(agg1#23)#96 AS agg1#103, cast((avg(UnscaledValue(agg2#24))#97 / 100.0) as decimal(11,6)) AS agg2#104, cast((avg(UnscaledValue(agg3#25))#98 / 100.0) as decimal(11,6)) AS agg3#105, cast((avg(UnscaledValue(agg4#26))#99 / 100.0) as decimal(11,6)) AS agg4#106]

(72) Union

(73) TakeOrderedAndProject
Input [7]: [i_item_id#22, s_state#20, g_state#47, agg1#48, agg2#49, agg3#50, agg4#51]
Arguments: 100, [i_item_id#22 ASC NULLS FIRST, s_state#20 ASC NULLS FIRST], [i_item_id#22, s_state#20, g_state#47, agg1#48, agg2#49, agg3#50, agg4#51]

===== Subqueries =====

Subquery:1 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#10, [id=#11]
ObjectHashAggregate (80)
+- Exchange (79)
   +- ObjectHashAggregate (78)
      +- * Project (77)
         +- * Filter (76)
            +- * ColumnarToRow (75)
               +- Scan parquet spark_catalog.default.customer_demographics (74)


(74) Scan parquet spark_catalog.default.customer_demographics
Output [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Batched: true
Location [not included in comparison]/{warehouse_dir}/customer_demographics]
PushedFilters: [IsNotNull(cd_gender), IsNotNull(cd_marital_status), IsNotNull(cd_education_status), EqualTo(cd_gender,F), EqualTo(cd_marital_status,W), EqualTo(cd_education_status,Primary             ), IsNotNull(cd_demo_sk)]
ReadSchema: struct<cd_demo_sk:int,cd_gender:string,cd_marital_status:string,cd_education_status:string>

(75) ColumnarToRow [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(76) Filter [codegen id : 1]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]
Condition : ((((((isnotnull(cd_gender#15) AND isnotnull(cd_marital_status#16)) AND isnotnull(cd_education_status#17)) AND (cd_gender#15 = F)) AND (cd_marital_status#16 = W)) AND (cd_education_status#17 = Primary             )) AND isnotnull(cd_demo_sk#14))

(77) Project [codegen id : 1]
Output [1]: [cd_demo_sk#14]
Input [4]: [cd_demo_sk#14, cd_gender#15, cd_marital_status#16, cd_education_status#17]

(78) ObjectHashAggregate
Input [1]: [cd_demo_sk#14]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)]
Aggregate Attributes [1]: [buf#107]
Results [1]: [buf#108]

(79) Exchange
Input [1]: [buf#108]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=9]

(80) ObjectHashAggregate
Input [1]: [buf#108]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)#109]
Results [1]: [bloom_filter_agg(xxhash64(cd_demo_sk#14, 42), 27440, 219520, 0, 0)#109 AS bloomFilter#110]

Subquery:2 Hosting operator id = 3 Hosting Expression = Subquery scalar-subquery#12, [id=#13]
ObjectHashAggregate (86)
+- Exchange (85)
   +- ObjectHashAggregate (84)
      +- * Filter (83)
         +- * ColumnarToRow (82)
            +- Scan parquet spark_catalog.default.store (81)


(81) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(82) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#19, s_state#20]

(83) Filter [codegen id : 1]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(84) ObjectHashAggregate
Input [2]: [s_store_sk#19, s_state#20]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [buf#111]
Results [1]: [buf#112]

(85) Exchange
Input [1]: [buf#112]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=10]

(86) ObjectHashAggregate
Input [1]: [buf#112]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)#113]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)#113 AS bloomFilter#114]

Subquery:3 Hosting operator id = 1 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9
BroadcastExchange (91)
+- * Project (90)
   +- * Filter (89)
      +- * ColumnarToRow (88)
         +- Scan parquet spark_catalog.default.date_dim (87)


(87) Scan parquet spark_catalog.default.date_dim
Output [2]: [d_date_sk#18, d_year#115]
Batched: true
Location [not included in comparison]/{warehouse_dir}/date_dim]
PushedFilters: [IsNotNull(d_year), EqualTo(d_year,1998), IsNotNull(d_date_sk)]
ReadSchema: struct<d_date_sk:int,d_year:int>

(88) ColumnarToRow [codegen id : 1]
Input [2]: [d_date_sk#18, d_year#115]

(89) Filter [codegen id : 1]
Input [2]: [d_date_sk#18, d_year#115]
Condition : ((isnotnull(d_year#115) AND (d_year#115 = 1998)) AND isnotnull(d_date_sk#18))

(90) Project [codegen id : 1]
Output [1]: [d_date_sk#18]
Input [2]: [d_date_sk#18, d_year#115]

(91) BroadcastExchange
Input [1]: [d_date_sk#18]
Arguments: HashedRelationBroadcastMode(List(cast(input[0, int, true] as bigint)),false), [plan_id=11]

Subquery:4 Hosting operator id = 31 Hosting Expression = ReusedSubquery Subquery scalar-subquery#10, [id=#11]

Subquery:5 Hosting operator id = 31 Hosting Expression = Subquery scalar-subquery#52, [id=#53]
ObjectHashAggregate (98)
+- Exchange (97)
   +- ObjectHashAggregate (96)
      +- * Project (95)
         +- * Filter (94)
            +- * ColumnarToRow (93)
               +- Scan parquet spark_catalog.default.store (92)


(92) Scan parquet spark_catalog.default.store
Output [2]: [s_store_sk#19, s_state#20]
Batched: true
Location [not included in comparison]/{warehouse_dir}/store]
PushedFilters: [IsNotNull(s_state), EqualTo(s_state,TN), IsNotNull(s_store_sk)]
ReadSchema: struct<s_store_sk:int,s_state:string>

(93) ColumnarToRow [codegen id : 1]
Input [2]: [s_store_sk#19, s_state#20]

(94) Filter [codegen id : 1]
Input [2]: [s_store_sk#19, s_state#20]
Condition : ((isnotnull(s_state#20) AND (s_state#20 = TN)) AND isnotnull(s_store_sk#19))

(95) Project [codegen id : 1]
Output [1]: [s_store_sk#19]
Input [2]: [s_store_sk#19, s_state#20]

(96) ObjectHashAggregate
Input [1]: [s_store_sk#19]
Keys: []
Functions [1]: [partial_bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [buf#116]
Results [1]: [buf#117]

(97) Exchange
Input [1]: [buf#117]
Arguments: SinglePartition, ENSURE_REQUIREMENTS, [plan_id=12]

(98) ObjectHashAggregate
Input [1]: [buf#117]
Keys: []
Functions [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)]
Aggregate Attributes [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)#118]
Results [1]: [bloom_filter_agg(xxhash64(s_store_sk#19, 42), 45, 360, 0, 0)#118 AS bloomFilter#119]

Subquery:6 Hosting operator id = 29 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9

Subquery:7 Hosting operator id = 53 Hosting Expression = ReusedSubquery Subquery scalar-subquery#10, [id=#11]

Subquery:8 Hosting operator id = 53 Hosting Expression = ReusedSubquery Subquery scalar-subquery#52, [id=#53]

Subquery:9 Hosting operator id = 51 Hosting Expression = ss_sold_date_sk#8 IN dynamicpruning#9


